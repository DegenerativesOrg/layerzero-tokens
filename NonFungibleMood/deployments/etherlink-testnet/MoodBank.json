{
  "address": "0xed593845CD8738105eB1A5cF30682434831758Ae",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        }
      ],
      "name": "addMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        }
      ],
      "name": "decodeMood",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "_mood",
          "type": "tuple"
        }
      ],
      "name": "encodeMood",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getHashByMoodId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getMoodDataByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodIdOfHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodOfHash",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMoodUserByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        }
      ],
      "name": "getMoodUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "characters",
          "type": "string[]"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hashToMood",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "_mood",
          "type": "tuple"
        }
      ],
      "name": "setTokenized",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isTokenized",
          "type": "bool"
        }
      ],
      "name": "tokenize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMoods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "themeAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bgColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fontColor",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "expansionLevel",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71b9963eb70ab91b6b45a22eee18199e3b36d0275cf911b614bb8cf69ebbf243",
  "receipt": {
    "to": null,
    "from": "0x0000704b5427D1BE19059Ee68BAdb88935E6079a",
    "contractAddress": "0xed593845CD8738105eB1A5cF30682434831758Ae",
    "transactionIndex": 0,
    "gasUsed": "39343707",
    "logsBloom": "0x
    "blockHash": "0x995f946ab8610cf5ce4bbe6ca2ad2829024b51fdd9592f785597854d3969fad9",
    "transactionHash": "0x71b9963eb70ab91b6b45a22eee18199e3b36d0275cf911b614bb8cf69ebbf243",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14536026,
        "transactionHash": "0x71b9963eb70ab91b6b45a22eee18199e3b36d0275cf911b614bb8cf69ebbf243",
        "address": "0xed593845CD8738105eB1A5cF30682434831758Ae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000704b5427d1be19059ee68badb88935e6079a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x995f946ab8610cf5ce4bbe6ca2ad2829024b51fdd9592f785597854d3969fad9"
      }
    ],
    "blockNumber": 14536026,
    "cumulativeGasUsed": "39343707",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d86619689dd464fd600ba42072707169",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"}],\"name\":\"addMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"}],\"name\":\"decodeMood\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"_mood\",\"type\":\"tuple\"}],\"name\":\"encodeMood\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getHashByMoodId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getMoodDataByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodIdOfHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodOfHash\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMoodUserByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"}],\"name\":\"getMoodUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"characters\",\"type\":\"string[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashToMood\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"_mood\",\"type\":\"tuple\"}],\"name\":\"setTokenized\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isTokenized\",\"type\":\"bool\"}],\"name\":\"tokenize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMoods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addMood(bytes)\":{\"details\":\"Decodes mood data from bytes and stores it.\",\"params\":{\"_moodData\":\"Bytes data containing encoded mood information (emojis, theme, colors, etc.).\"},\"returns\":{\"_0\":\"newMoodId The ID of the newly added mood.\",\"_1\":\"user The address of the user who added the mood.\"}},\"decodeMood(bytes)\":{\"params\":{\"_moodData\":\"Bytes data containing encoded mood information.\"},\"returns\":{\"_0\":\"A Mood struct containing the decoded mood data.\"}},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"params\":{\"_mood\":\"The Mood struct containing the mood data to encode.\"},\"returns\":{\"_0\":\"Bytes data containing the encoded mood information.\"}},\"getMoodById(uint256)\":{\"params\":{\"moodId\":\"The ID of the mood.\"},\"returns\":{\"_0\":\"The Mood struct corresponding to the given mood ID.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMood(bytes)\":{\"notice\":\"Adds a new mood to the bank.\"},\"decodeMood(bytes)\":{\"notice\":\"Decodes mood data from bytes.\"},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"notice\":\"Encodes mood data into bytes.\"},\"getMoodById(uint256)\":{\"notice\":\"Gets the mood data for a given mood ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MoodBank.sol\":\"MoodBank\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/core/MoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IMoodBank, Mood } from \\\"../interface/IMoodBank.sol\\\";\\r\\n\\r\\ncontract MoodBank is Ownable(msg.sender), IMoodBank {\\r\\n    uint256 public totalMood;\\r\\n\\r\\n    mapping(address => bool) public authorized;\\r\\n    mapping(bytes32 => bool) public tokenized;\\r\\n\\r\\n    mapping(uint256 => address) public owners;\\r\\n    mapping(address => Mood[]) public userMoods;\\r\\n    mapping(address => uint256[]) public moodIds;\\r\\n    mapping(bytes32 => address[]) public moodUsers;\\r\\n\\r\\n    mapping(bytes32 => string[]) public hashToMood;\\r\\n    mapping(bytes32 => uint256) public hashToId;\\r\\n    mapping(uint256 => bytes32) public idToHash;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Adds a new mood to the bank.\\r\\n    /// @dev Decodes mood data from bytes and stores it.\\r\\n    /// @param _moodData Bytes data containing encoded mood information (emojis, theme, colors, etc.).\\r\\n    /// @return newMoodId The ID of the newly added mood.\\r\\n    /// @return user The address of the user who added the mood.\\r\\n    function addMood(bytes calldata _moodData) external payable returns (uint256, address, bool) {\\r\\n        require(authorized[msg.sender], \\\"Caller not authorized\\\");\\r\\n\\r\\n        Mood memory mood = decodeMood(_moodData);\\r\\n\\r\\n        require(mood.user != address(0), \\\"Zero address\\\");\\r\\n        require(mood.emojis.length > 0, \\\"No emojis\\\");\\r\\n\\r\\n        uint256 newMoodId = totalMood;\\r\\n\\r\\n        userMoods[mood.user].push(mood);\\r\\n        owners[newMoodId] = mood.user;\\r\\n\\r\\n        // It's unclear what the purpose of moodIds is, as the mood ID can be derived from the\\r\\n        // index in the userMoods array. If you need to keep it, make sure the logic is correct.\\r\\n        moodIds[mood.user].push(newMoodId);\\r\\n\\r\\n        bytes32 moodHash = hash(mood.emojis); // Use the correct function name (hash instead of _hash)\\r\\n        moodUsers[moodHash].push(mood.user);\\r\\n        idToHash[newMoodId] = moodHash;\\r\\n\\r\\n        bool isTokenized;\\r\\n        isTokenized = tokenized[moodHash];\\r\\n        if (!isTokenized) {\\r\\n            tokenized[moodHash] = true;\\r\\n        }\\r\\n\\r\\n        totalMood++;\\r\\n        return (newMoodId, mood.user, isTokenized);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes mood data from bytes.\\r\\n    /// @param _moodData Bytes data containing encoded mood information.\\r\\n    /// @return A Mood struct containing the decoded mood data.\\r\\n    function decodeMood(bytes calldata _moodData) public pure returns (Mood memory) {\\r\\n        (\\r\\n            uint256 chainId,\\r\\n            uint256 timestamp,\\r\\n            string[] memory emojis,\\r\\n            address themeAddress,\\r\\n            string memory bgColor,\\r\\n            string memory fontColor,\\r\\n            uint8 expansionLevel,\\r\\n            address user\\r\\n        ) = abi.decode(_moodData, (uint256, uint256, string[], address, string, string, uint8, address));\\r\\n\\r\\n        return Mood(chainId, timestamp, emojis, themeAddress, bgColor, fontColor, expansionLevel, user);\\r\\n    }\\r\\n\\r\\n    /// @notice Encodes mood data into bytes.\\r\\n    /// @param _mood The Mood struct containing the mood data to encode.\\r\\n    /// @return Bytes data containing the encoded mood information.\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encode(\\r\\n                _mood.chainId,\\r\\n                _mood.timestamp,\\r\\n                _mood.emojis,\\r\\n                _mood.themeAddress,\\r\\n                _mood.bgColor,\\r\\n                _mood.fontColor,\\r\\n                _mood.expansionLevel,\\r\\n                _mood.user\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setTokenized(Mood calldata _mood) external pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encode(\\r\\n                _mood.chainId,\\r\\n                _mood.timestamp,\\r\\n                _mood.emojis,\\r\\n                _mood.themeAddress,\\r\\n                _mood.bgColor,\\r\\n                _mood.fontColor,\\r\\n                _mood.expansionLevel,\\r\\n                _mood.user\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function authorize(address addr, bool isAuthorized) external onlyOwner {\\r\\n        authorized[addr] = isAuthorized;\\r\\n    }\\r\\n\\r\\n    function tokenize(bytes32 moodHash, bool isTokenized) external {\\r\\n        require(authorized[msg.sender], \\\"Caller not authorized\\\");\\r\\n        tokenized[moodHash] = isTokenized;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the mood data for a given mood ID.\\r\\n    /// @param moodId The ID of the mood.\\r\\n    /// @return The Mood struct corresponding to the given mood ID.\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory) {\\r\\n        // Find the user who owns this moodId\\r\\n        address user = owners[moodId];\\r\\n        require(user != address(0), \\\"Invalid mood ID\\\");\\r\\n\\r\\n        Mood[] storage userMoodsArray = userMoods[user];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i];\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\"); // Revert if no matching mood is found\\r\\n    }\\r\\n\\r\\n    function getOwner(uint256 moodId) external view returns (address) {\\r\\n        return owners[moodId];\\r\\n    }\\r\\n\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256) {\\r\\n        address user = owners[moodId];\\r\\n        require(user != address(0), \\\"Invalid mood ID\\\");\\r\\n        Mood[] storage userMoodsArray = userMoods[user];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i].emojis.length;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\");\\r\\n    }\\r\\n\\r\\n    function getUserMoodLength(address user) external view returns (uint256) {\\r\\n        return userMoods[user].length;\\r\\n    }\\r\\n\\r\\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory) {\\r\\n        require(i < userMoods[user].length, \\\"Index out of bounds\\\"); // Add bounds check\\r\\n        return userMoods[user][i];\\r\\n    }\\r\\n\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory) {\\r\\n        return hashToMood[moodHash];\\r\\n    }\\r\\n\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256) {\\r\\n        return hashToId[moodHash];\\r\\n    }\\r\\n\\r\\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32) {\\r\\n        return idToHash[moodId];\\r\\n    }\\r\\n\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash].length;\\r\\n    }\\r\\n\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash][index];\\r\\n    }\\r\\n\\r\\n    function hash(string[] memory characters) public pure returns (bytes32) {\\r\\n        string memory chars;\\r\\n        for (uint256 i = 0; i < characters.length; i++) {\\r\\n            chars = string.concat(chars, characters[i]);\\r\\n        }\\r\\n        return keccak256(abi.encodePacked(chars));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63f530baecf8e9474adfb54b6bf59df14d3db0facadd848f2d4085b6b33570f9\",\"license\":\"MIT\"},\"contracts/interface/IMoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OnChainVision Contracts\\r\\n\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nstruct Mood {\\r\\n    uint256 chainId;\\r\\n    uint256 timestamp;\\r\\n    string[] emojis;\\r\\n    address themeAddress;\\r\\n    string bgColor;\\r\\n    string fontColor;\\r\\n    uint8 expansionLevel;\\r\\n    address user;\\r\\n}\\r\\n\\r\\ninterface IMoodBank {\\r\\n    function addMood(bytes calldata mood) external payable returns (uint256, address, bool);\\r\\n    function decodeMood(bytes calldata _moodData) external pure returns (Mood memory);\\r\\n    function tokenize(bytes32 moodHash, bool isTokenized) external;\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory);\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory);\\r\\n    function getOwner(uint256 moodId) external view returns (address);\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256);\\r\\n    function getUserMoodLength(address user) external view returns (uint256);\\r\\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory);\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory);\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256);\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256);\\r\\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32);\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x86fc594d3a80d69e49ad48171d48db809db5414a456589019691235e063b701a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612337806100a56000396000f3fe6080604052600436106101cd5760003560e01c80638cfa9486116100f7578063c448a98711610095578063db23de9511610064578063db23de9514610620578063e1b9005e1461032c578063ec2aa95314610640578063f2fde38b1461066057600080fd5b8063c448a98714610586578063c8ee6bc9146105a6578063c9fcf545146105d3578063cea43ab21461060057600080fd5b80639a590ddd116100d15780639a590ddd146104e0578063b74252c114610500578063b918161114610520578063c41a360a1461055057600080fd5b80638cfa9486146104555780638da5cb5b146104955780638fb5548f146104b357600080fd5b806324ea8bcb1161016f5780636fcc5bcf1161013e5780636fcc5bcf146103d3578063708641c5146103f3578063715018a61461041357806385556e031461042857600080fd5b806324ea8bcb1461032c5780632d1fb389146103595780633b0e317f1461037b578063672bbf0c1461039b57600080fd5b80630b9545db116101ab5780630b9545db146102965780630e623e46146102c95780631878fcbb146102e95780631e3e2d4a146102ff57600080fd5b8063025e7c27146101d257806302e33f2214610225578063095f077314610269575b600080fd5b3480156101de57600080fd5b506102086101ed36600461187f565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023157600080fd5b5061025b6102403660046118ad565b6001600160a01b031660009081526005602052604090205490565b60405190815260200161021c565b34801561027557600080fd5b5061025b61028436600461187f565b60096020526000908152604090205481565b3480156102a257600080fd5b506102b66102b13660046118d1565b610680565b60405161021c979695949392919061194d565b3480156102d557600080fd5b506102086102e43660046119ad565b610803565b3480156102f557600080fd5b5061025b60015481565b34801561030b57600080fd5b5061031f61031a36600461187f565b61083b565b60405161021c9190611a29565b34801561033857600080fd5b5061034c610347366004611ae8565b610b8b565b60405161021c9190611b24565b34801561036557600080fd5b50610379610374366004611b4c565b610c1c565b005b34801561038757600080fd5b5061025b610396366004611cd7565b610c4f565b6103ae6103a9366004611d14565b610c71565b604080519384526001600160a01b03909216602084015215159082015260600161021c565b3480156103df57600080fd5b5061031f6103ee3660046118d1565b610f50565b3480156103ff57600080fd5b5061025b61040e3660046118d1565b61124b565b34801561041f57600080fd5b5061037961127c565b34801561043457600080fd5b5061044861044336600461187f565b611290565b60405161021c9190611d86565b34801561046157600080fd5b5061048561047036600461187f565b60036020526000908152604090205460ff1681565b604051901515815260200161021c565b3480156104a157600080fd5b506000546001600160a01b0316610208565b3480156104bf57600080fd5b5061025b6104ce36600461187f565b600a6020526000908152604090205481565b3480156104ec57600080fd5b5061034c6104fb3660046119ad565b61137c565b34801561050c57600080fd5b5061025b61051b36600461187f565b611435565b34801561052c57600080fd5b5061048561053b3660046118ad565b60026020526000908152604090205460ff1681565b34801561055c57600080fd5b5061020861056b36600461187f565b6000908152600460205260409020546001600160a01b031690565b34801561059257600080fd5b506103796105a1366004611dea565b6114ed565b3480156105b257600080fd5b5061025b6105c136600461187f565b6000908152600a602052604090205490565b3480156105df57600080fd5b5061025b6105ee36600461187f565b60009081526009602052604090205490565b34801561060c57600080fd5b5061031f61061b366004611d14565b611564565b34801561062c57600080fd5b5061020861063b366004611e0d565b6115da565b34801561064c57600080fd5b5061025b61065b366004611cd7565b611627565b34801561066c57600080fd5b5061037961067b3660046118ad565b6116ad565b6005602052816000526040600020818154811061069c57600080fd5b600091825260209091206007909102018054600182015460038301546004840180549396509194506001600160a01b031692916106d890611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461070490611e52565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050509080600501805461076690611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461079290611e52565b80156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041687565b6007602052816000526040600020818154811061081f57600080fd5b6000918252602090912001546001600160a01b03169150829050565b610843611768565b6000828152600460205260409020546001600160a01b03168061089f5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600560205260408120905b8154811015610b5157848103610b49578181815481106108db576108db611e8c565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156109da57838290600052602060002001805461094d90611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461097990611e52565b80156109c65780601f1061099b576101008083540402835291602001916109c6565b820191906000526020600020905b8154815290600101906020018083116109a957829003601f168201915b50505050508152602001906001019061092e565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610a0990611e52565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3590611e52565b8015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b50505050508152602001600582018054610a9b90611e52565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac790611e52565b8015610b145780601f10610ae957610100808354040283529160200191610b14565b820191906000526020600020905b815481529060010190602001808311610af757829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b031660409091015295945050505050565b6001016108b9565b5060405162461bcd60e51b815260206004820152600e60248201526d135bdbd9081b9bdd08199bdd5b9960921b6044820152606401610896565b606081356020830135610ba16040850185611ea2565b610bb160808701606088016118ad565b610bbe6080880188611ef3565b610bcb60a08a018a611ef3565b610bdb60e08c0160c08d01611f4b565b610bec6101008d0160e08e016118ad565b604051602001610c069b9a99989796959493929190611f8f565b6040516020818303038152906040529050919050565b610c246116eb565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080610c5b83611627565b6000908152600760205260409020549392505050565b336000908152600260205260408120548190819060ff16610ccc5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610896565b6000610cd88686611564565b60e08101519091506001600160a01b0316610d245760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610896565b600081604001515111610d655760405162461bcd60e51b81526020600482015260096024820152684e6f20656d6f6a697360b81b6044820152606401610896565b6001805460e08301516001600160a01b0316600090815260056020908152604080832080548087018255908452928290208651600790940201928355818601519483019490945592840151805192938593610dc692600285019201906117c2565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560808201516004820190610e0190826120f6565b5060a08201516005820190610e1690826120f6565b5060c08201516006918201805460e09485015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790559184018051600085815260046020908152604080832080546001600160a01b0319169488169490941790935592519094168452918152818320805460018101825590845290832001839055830151610ea490611627565b600081815260076020908152604080832060e0880151815460018101835591855283852090910180546001600160a01b0319166001600160a01b03909216919091179055858352600a8252808320849055838352600390915290205490915060ff1680610f25576000828152600360205260409020805460ff191660011790555b60018054906000610f35836121b6565b909155505060e0939093015191989197509195509350505050565b610f58611768565b6001600160a01b0383166000908152600560205260409020548210610fb55760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610896565b6001600160a01b0383166000908152600560205260409020805483908110610fdf57610fdf611e8c565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156110de57838290600052602060002001805461105190611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461107d90611e52565b80156110ca5780601f1061109f576101008083540402835291602001916110ca565b820191906000526020600020905b8154815290600101906020018083116110ad57829003601f168201915b505050505081526020019060010190611032565b5050509082525060038201546001600160a01b0316602082015260048201805460409092019161110d90611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461113990611e52565b80156111865780601f1061115b57610100808354040283529160200191611186565b820191906000526020600020905b81548152906001019060200180831161116957829003601f168201915b5050505050815260200160058201805461119f90611e52565b80601f01602080910402602001604051908101604052809291908181526020018280546111cb90611e52565b80156112185780601f106111ed57610100808354040283529160200191611218565b820191906000526020600020905b8154815290600101906020018083116111fb57829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b03166040909101529392505050565b6006602052816000526040600020818154811061126757600080fd5b90600052602060002001600091509150505481565b6112846116eb565b61128e6000611718565b565b606060086000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156113715783829060005260206000200180546112e490611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461131090611e52565b801561135d5780601f106113325761010080835404028352916020019161135d565b820191906000526020600020905b81548152906001019060200180831161134057829003601f168201915b5050505050815260200190600101906112c5565b505050509050919050565b6008602052816000526040600020818154811061139857600080fd5b906000526020600020016000915091505080546113b490611e52565b80601f01602080910402602001604051908101604052809291908181526020018280546113e090611e52565b801561142d5780601f106114025761010080835404028352916020019161142d565b820191906000526020600020905b81548152906001019060200180831161141057829003601f168201915b505050505081565b6000818152600460205260408120546001600160a01b03168061148c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b6044820152606401610896565b6001600160a01b0381166000908152600560205260408120905b8154811015610b51578481036114e5578181815481106114c8576114c8611e8c565b600091825260209091206002600790920201015495945050505050565b6001016114a6565b3360009081526002602052604090205460ff166115445760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610896565b600091825260036020526040909120805460ff1916911515919091179055565b61156c611768565b6000808080808080806115818a8c018c6121e8565b60408051610100810182529889526020890197909752958701949094526001600160a01b039283166060870152608086019190915260a085015260ff90911660c08401521660e08201529b9a5050505050505050505050565b6000806115e684611627565b60008181526007602052604090208054919250908490811061160a5761160a611e8c565b6000918252602090912001546001600160a01b0316949350505050565b6000606060005b835181101561167d578184828151811061164a5761164a611e8c565b60200260200101516040516020016116639291906122b6565b60408051601f19818403018152919052915060010161162e565b508060405160200161168f91906122e5565b60405160208183030381529060405280519060200120915050919050565b6116b56116eb565b6001600160a01b0381166116df57604051631e4fbdf760e01b815260006004820152602401610896565b6116e881611718565b50565b6000546001600160a01b0316331461128e5760405163118cdaa760e01b8152336004820152602401610896565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016060815260200160608152602001600060ff16815260200160006001600160a01b031681525090565b828054828255906000526020600020908101928215611808579160200282015b8281111561180857825182906117f890826120f6565b50916020019190600101906117e2565b50611814929150611818565b5090565b8082111561181457600061182c8282611835565b50600101611818565b50805461184190611e52565b6000825580601f10611851575050565b601f0160209004906000526020600020908101906116e891905b80821115611814576000815560010161186b565b60006020828403121561189157600080fd5b5035919050565b6001600160a01b03811681146116e857600080fd5b6000602082840312156118bf57600080fd5b81356118ca81611898565b9392505050565b600080604083850312156118e457600080fd5b82356118ef81611898565b946020939093013593505050565b60005b83811015611918578181015183820152602001611900565b50506000910152565b600081518084526119398160208601602086016118fd565b601f01601f19169290920160200192915050565b878152866020820152600060018060a01b03808816604084015260e0606084015261197b60e0840188611921565b838103608085015261198d8188611921565b60ff9690961660a0850152509290921660c0909101525095945050505050565b600080604083850312156119c057600080fd5b50508035926020909101359150565b60008282518085526020808601955060208260051b8401016020860160005b84811015611a1c57601f19868403018952611a0a838351611921565b988401989250908301906001016119ee565b5090979650505050505050565b60208152815160208201526020820151604082015260006040830151610100806060850152611a5c6101208501836119cf565b91506060850151611a7860808601826001600160a01b03169052565b506080850151601f19808685030160a0870152611a958483611921565b935060a08701519150808685030160c087015250611ab38382611921565b92505060c0850151611aca60e086018260ff169052565b5060e08501516001600160a01b038116858301525090949350505050565b600060208284031215611afa57600080fd5b813567ffffffffffffffff811115611b1157600080fd5b820161010081850312156118ca57600080fd5b6020815260006118ca6020830184611921565b80358015158114611b4757600080fd5b919050565b60008060408385031215611b5f57600080fd5b8235611b6a81611898565b9150611b7860208401611b37565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc057611bc0611b81565b604052919050565b600082601f830112611bd957600080fd5b813567ffffffffffffffff811115611bf357611bf3611b81565b611c06601f8201601f1916602001611b97565b818152846020838601011115611c1b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611c4957600080fd5b8135602067ffffffffffffffff80831115611c6657611c66611b81565b8260051b611c75838201611b97565b9384528581018301938381019088861115611c8f57600080fd5b84880192505b85831015611ccb57823584811115611cad5760008081fd5b611cbb8a87838c0101611bc8565b8352509184019190840190611c95565b98975050505050505050565b600060208284031215611ce957600080fd5b813567ffffffffffffffff811115611d0057600080fd5b611d0c84828501611c38565b949350505050565b60008060208385031215611d2757600080fd5b823567ffffffffffffffff80821115611d3f57600080fd5b818501915085601f830112611d5357600080fd5b813581811115611d6257600080fd5b866020828501011115611d7457600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611ddd57603f19888603018452611dcb858351611921565b94509285019290850190600101611daf565b5092979650505050505050565b60008060408385031215611dfd57600080fd5b82359150611b7860208401611b37565b60008060408385031215611e2057600080fd5b823567ffffffffffffffff811115611e3757600080fd5b611e4385828601611c38565b95602094909401359450505050565b600181811c90821680611e6657607f821691505b602082108103611e8657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611eb957600080fd5b83018035915067ffffffffffffffff821115611ed457600080fd5b6020019150600581901b3603821315611eec57600080fd5b9250929050565b6000808335601e19843603018112611f0a57600080fd5b83018035915067ffffffffffffffff821115611f2557600080fd5b602001915036819003821315611eec57600080fd5b803560ff81168114611b4757600080fd5b600060208284031215611f5d57600080fd5b6118ca82611f3a565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061010082018d83528c60208401526101006040840152808b8252610120840190506101208c60051b85010191508c60005b8d81101561203a5785840361011f19018352368f9003601e1901823512611fe857600080fd5b8e823501803560208201915067ffffffffffffffff81111561200957600080fd5b80360382131561201857600080fd5b612023868284611f66565b955050506020928301929190910190600101611fc2565b5050506001600160a01b038a166060840152828103608084015261205f81898b611f66565b905082810360a0840152612074818789611f66565b91505061208660c083018560ff169052565b6001600160a01b03831660e08301529c9b505050505050505050505050565b601f8211156120f1576000816000526020600020601f850160051c810160208610156120ce5750805b601f850160051c820191505b818110156120ed578281556001016120da565b5050505b505050565b815167ffffffffffffffff81111561211057612110611b81565b6121248161211e8454611e52565b846120a5565b602080601f83116001811461215957600084156121415750858301515b600019600386901b1c1916600185901b1785556120ed565b600085815260208120601f198616915b8281101561218857888601518255948401946001909101908401612169565b50858210156121a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016121d657634e487b7160e01b600052601160045260246000fd5b5060010190565b8035611b4781611898565b600080600080600080600080610100898b03121561220557600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561222b57600080fd5b6122378c838d01611c38565b975061224560608c016121dd565b965060808b013591508082111561225b57600080fd5b6122678c838d01611bc8565b955060a08b013591508082111561227d57600080fd5b5061228a8b828c01611bc8565b93505061229960c08a01611f3a565b91506122a760e08a016121dd565b90509295985092959890939650565b600083516122c88184602088016118fd565b8351908301906122dc8183602088016118fd565b01949350505050565b600082516122f78184602087016118fd565b919091019291505056fea26469706673582212209bd9d23c2535c2cf1c49c52445db1b25f8a1bdcfe71b2e6ccb86ff2c68c44a4f64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638cfa9486116100f7578063c448a98711610095578063db23de9511610064578063db23de9514610620578063e1b9005e1461032c578063ec2aa95314610640578063f2fde38b1461066057600080fd5b8063c448a98714610586578063c8ee6bc9146105a6578063c9fcf545146105d3578063cea43ab21461060057600080fd5b80639a590ddd116100d15780639a590ddd146104e0578063b74252c114610500578063b918161114610520578063c41a360a1461055057600080fd5b80638cfa9486146104555780638da5cb5b146104955780638fb5548f146104b357600080fd5b806324ea8bcb1161016f5780636fcc5bcf1161013e5780636fcc5bcf146103d3578063708641c5146103f3578063715018a61461041357806385556e031461042857600080fd5b806324ea8bcb1461032c5780632d1fb389146103595780633b0e317f1461037b578063672bbf0c1461039b57600080fd5b80630b9545db116101ab5780630b9545db146102965780630e623e46146102c95780631878fcbb146102e95780631e3e2d4a146102ff57600080fd5b8063025e7c27146101d257806302e33f2214610225578063095f077314610269575b600080fd5b3480156101de57600080fd5b506102086101ed36600461187f565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023157600080fd5b5061025b6102403660046118ad565b6001600160a01b031660009081526005602052604090205490565b60405190815260200161021c565b34801561027557600080fd5b5061025b61028436600461187f565b60096020526000908152604090205481565b3480156102a257600080fd5b506102b66102b13660046118d1565b610680565b60405161021c979695949392919061194d565b3480156102d557600080fd5b506102086102e43660046119ad565b610803565b3480156102f557600080fd5b5061025b60015481565b34801561030b57600080fd5b5061031f61031a36600461187f565b61083b565b60405161021c9190611a29565b34801561033857600080fd5b5061034c610347366004611ae8565b610b8b565b60405161021c9190611b24565b34801561036557600080fd5b50610379610374366004611b4c565b610c1c565b005b34801561038757600080fd5b5061025b610396366004611cd7565b610c4f565b6103ae6103a9366004611d14565b610c71565b604080519384526001600160a01b03909216602084015215159082015260600161021c565b3480156103df57600080fd5b5061031f6103ee3660046118d1565b610f50565b3480156103ff57600080fd5b5061025b61040e3660046118d1565b61124b565b34801561041f57600080fd5b5061037961127c565b34801561043457600080fd5b5061044861044336600461187f565b611290565b60405161021c9190611d86565b34801561046157600080fd5b5061048561047036600461187f565b60036020526000908152604090205460ff1681565b604051901515815260200161021c565b3480156104a157600080fd5b506000546001600160a01b0316610208565b3480156104bf57600080fd5b5061025b6104ce36600461187f565b600a6020526000908152604090205481565b3480156104ec57600080fd5b5061034c6104fb3660046119ad565b61137c565b34801561050c57600080fd5b5061025b61051b36600461187f565b611435565b34801561052c57600080fd5b5061048561053b3660046118ad565b60026020526000908152604090205460ff1681565b34801561055c57600080fd5b5061020861056b36600461187f565b6000908152600460205260409020546001600160a01b031690565b34801561059257600080fd5b506103796105a1366004611dea565b6114ed565b3480156105b257600080fd5b5061025b6105c136600461187f565b6000908152600a602052604090205490565b3480156105df57600080fd5b5061025b6105ee36600461187f565b60009081526009602052604090205490565b34801561060c57600080fd5b5061031f61061b366004611d14565b611564565b34801561062c57600080fd5b5061020861063b366004611e0d565b6115da565b34801561064c57600080fd5b5061025b61065b366004611cd7565b611627565b34801561066c57600080fd5b5061037961067b3660046118ad565b6116ad565b6005602052816000526040600020818154811061069c57600080fd5b600091825260209091206007909102018054600182015460038301546004840180549396509194506001600160a01b031692916106d890611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461070490611e52565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050509080600501805461076690611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461079290611e52565b80156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041687565b6007602052816000526040600020818154811061081f57600080fd5b6000918252602090912001546001600160a01b03169150829050565b610843611768565b6000828152600460205260409020546001600160a01b03168061089f5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600560205260408120905b8154811015610b5157848103610b49578181815481106108db576108db611e8c565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156109da57838290600052602060002001805461094d90611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461097990611e52565b80156109c65780601f1061099b576101008083540402835291602001916109c6565b820191906000526020600020905b8154815290600101906020018083116109a957829003601f168201915b50505050508152602001906001019061092e565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610a0990611e52565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3590611e52565b8015610a825780601f10610a5757610100808354040283529160200191610a82565b820191906000526020600020905b815481529060010190602001808311610a6557829003601f168201915b50505050508152602001600582018054610a9b90611e52565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac790611e52565b8015610b145780601f10610ae957610100808354040283529160200191610b14565b820191906000526020600020905b815481529060010190602001808311610af757829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b031660409091015295945050505050565b6001016108b9565b5060405162461bcd60e51b815260206004820152600e60248201526d135bdbd9081b9bdd08199bdd5b9960921b6044820152606401610896565b606081356020830135610ba16040850185611ea2565b610bb160808701606088016118ad565b610bbe6080880188611ef3565b610bcb60a08a018a611ef3565b610bdb60e08c0160c08d01611f4b565b610bec6101008d0160e08e016118ad565b604051602001610c069b9a99989796959493929190611f8f565b6040516020818303038152906040529050919050565b610c246116eb565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080610c5b83611627565b6000908152600760205260409020549392505050565b336000908152600260205260408120548190819060ff16610ccc5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610896565b6000610cd88686611564565b60e08101519091506001600160a01b0316610d245760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610896565b600081604001515111610d655760405162461bcd60e51b81526020600482015260096024820152684e6f20656d6f6a697360b81b6044820152606401610896565b6001805460e08301516001600160a01b0316600090815260056020908152604080832080548087018255908452928290208651600790940201928355818601519483019490945592840151805192938593610dc692600285019201906117c2565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560808201516004820190610e0190826120f6565b5060a08201516005820190610e1690826120f6565b5060c08201516006918201805460e09485015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790559184018051600085815260046020908152604080832080546001600160a01b0319169488169490941790935592519094168452918152818320805460018101825590845290832001839055830151610ea490611627565b600081815260076020908152604080832060e0880151815460018101835591855283852090910180546001600160a01b0319166001600160a01b03909216919091179055858352600a8252808320849055838352600390915290205490915060ff1680610f25576000828152600360205260409020805460ff191660011790555b60018054906000610f35836121b6565b909155505060e0939093015191989197509195509350505050565b610f58611768565b6001600160a01b0383166000908152600560205260409020548210610fb55760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610896565b6001600160a01b0383166000908152600560205260409020805483908110610fdf57610fdf611e8c565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156110de57838290600052602060002001805461105190611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461107d90611e52565b80156110ca5780601f1061109f576101008083540402835291602001916110ca565b820191906000526020600020905b8154815290600101906020018083116110ad57829003601f168201915b505050505081526020019060010190611032565b5050509082525060038201546001600160a01b0316602082015260048201805460409092019161110d90611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461113990611e52565b80156111865780601f1061115b57610100808354040283529160200191611186565b820191906000526020600020905b81548152906001019060200180831161116957829003601f168201915b5050505050815260200160058201805461119f90611e52565b80601f01602080910402602001604051908101604052809291908181526020018280546111cb90611e52565b80156112185780601f106111ed57610100808354040283529160200191611218565b820191906000526020600020905b8154815290600101906020018083116111fb57829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b03166040909101529392505050565b6006602052816000526040600020818154811061126757600080fd5b90600052602060002001600091509150505481565b6112846116eb565b61128e6000611718565b565b606060086000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156113715783829060005260206000200180546112e490611e52565b80601f016020809104026020016040519081016040528092919081815260200182805461131090611e52565b801561135d5780601f106113325761010080835404028352916020019161135d565b820191906000526020600020905b81548152906001019060200180831161134057829003601f168201915b5050505050815260200190600101906112c5565b505050509050919050565b6008602052816000526040600020818154811061139857600080fd5b906000526020600020016000915091505080546113b490611e52565b80601f01602080910402602001604051908101604052809291908181526020018280546113e090611e52565b801561142d5780601f106114025761010080835404028352916020019161142d565b820191906000526020600020905b81548152906001019060200180831161141057829003601f168201915b505050505081565b6000818152600460205260408120546001600160a01b03168061148c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b6044820152606401610896565b6001600160a01b0381166000908152600560205260408120905b8154811015610b51578481036114e5578181815481106114c8576114c8611e8c565b600091825260209091206002600790920201015495945050505050565b6001016114a6565b3360009081526002602052604090205460ff166115445760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610896565b600091825260036020526040909120805460ff1916911515919091179055565b61156c611768565b6000808080808080806115818a8c018c6121e8565b60408051610100810182529889526020890197909752958701949094526001600160a01b039283166060870152608086019190915260a085015260ff90911660c08401521660e08201529b9a5050505050505050505050565b6000806115e684611627565b60008181526007602052604090208054919250908490811061160a5761160a611e8c565b6000918252602090912001546001600160a01b0316949350505050565b6000606060005b835181101561167d578184828151811061164a5761164a611e8c565b60200260200101516040516020016116639291906122b6565b60408051601f19818403018152919052915060010161162e565b508060405160200161168f91906122e5565b60405160208183030381529060405280519060200120915050919050565b6116b56116eb565b6001600160a01b0381166116df57604051631e4fbdf760e01b815260006004820152602401610896565b6116e881611718565b50565b6000546001600160a01b0316331461128e5760405163118cdaa760e01b8152336004820152602401610896565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016060815260200160608152602001600060ff16815260200160006001600160a01b031681525090565b828054828255906000526020600020908101928215611808579160200282015b8281111561180857825182906117f890826120f6565b50916020019190600101906117e2565b50611814929150611818565b5090565b8082111561181457600061182c8282611835565b50600101611818565b50805461184190611e52565b6000825580601f10611851575050565b601f0160209004906000526020600020908101906116e891905b80821115611814576000815560010161186b565b60006020828403121561189157600080fd5b5035919050565b6001600160a01b03811681146116e857600080fd5b6000602082840312156118bf57600080fd5b81356118ca81611898565b9392505050565b600080604083850312156118e457600080fd5b82356118ef81611898565b946020939093013593505050565b60005b83811015611918578181015183820152602001611900565b50506000910152565b600081518084526119398160208601602086016118fd565b601f01601f19169290920160200192915050565b878152866020820152600060018060a01b03808816604084015260e0606084015261197b60e0840188611921565b838103608085015261198d8188611921565b60ff9690961660a0850152509290921660c0909101525095945050505050565b600080604083850312156119c057600080fd5b50508035926020909101359150565b60008282518085526020808601955060208260051b8401016020860160005b84811015611a1c57601f19868403018952611a0a838351611921565b988401989250908301906001016119ee565b5090979650505050505050565b60208152815160208201526020820151604082015260006040830151610100806060850152611a5c6101208501836119cf565b91506060850151611a7860808601826001600160a01b03169052565b506080850151601f19808685030160a0870152611a958483611921565b935060a08701519150808685030160c087015250611ab38382611921565b92505060c0850151611aca60e086018260ff169052565b5060e08501516001600160a01b038116858301525090949350505050565b600060208284031215611afa57600080fd5b813567ffffffffffffffff811115611b1157600080fd5b820161010081850312156118ca57600080fd5b6020815260006118ca6020830184611921565b80358015158114611b4757600080fd5b919050565b60008060408385031215611b5f57600080fd5b8235611b6a81611898565b9150611b7860208401611b37565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc057611bc0611b81565b604052919050565b600082601f830112611bd957600080fd5b813567ffffffffffffffff811115611bf357611bf3611b81565b611c06601f8201601f1916602001611b97565b818152846020838601011115611c1b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611c4957600080fd5b8135602067ffffffffffffffff80831115611c6657611c66611b81565b8260051b611c75838201611b97565b9384528581018301938381019088861115611c8f57600080fd5b84880192505b85831015611ccb57823584811115611cad5760008081fd5b611cbb8a87838c0101611bc8565b8352509184019190840190611c95565b98975050505050505050565b600060208284031215611ce957600080fd5b813567ffffffffffffffff811115611d0057600080fd5b611d0c84828501611c38565b949350505050565b60008060208385031215611d2757600080fd5b823567ffffffffffffffff80821115611d3f57600080fd5b818501915085601f830112611d5357600080fd5b813581811115611d6257600080fd5b866020828501011115611d7457600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611ddd57603f19888603018452611dcb858351611921565b94509285019290850190600101611daf565b5092979650505050505050565b60008060408385031215611dfd57600080fd5b82359150611b7860208401611b37565b60008060408385031215611e2057600080fd5b823567ffffffffffffffff811115611e3757600080fd5b611e4385828601611c38565b95602094909401359450505050565b600181811c90821680611e6657607f821691505b602082108103611e8657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611eb957600080fd5b83018035915067ffffffffffffffff821115611ed457600080fd5b6020019150600581901b3603821315611eec57600080fd5b9250929050565b6000808335601e19843603018112611f0a57600080fd5b83018035915067ffffffffffffffff821115611f2557600080fd5b602001915036819003821315611eec57600080fd5b803560ff81168114611b4757600080fd5b600060208284031215611f5d57600080fd5b6118ca82611f3a565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061010082018d83528c60208401526101006040840152808b8252610120840190506101208c60051b85010191508c60005b8d81101561203a5785840361011f19018352368f9003601e1901823512611fe857600080fd5b8e823501803560208201915067ffffffffffffffff81111561200957600080fd5b80360382131561201857600080fd5b612023868284611f66565b955050506020928301929190910190600101611fc2565b5050506001600160a01b038a166060840152828103608084015261205f81898b611f66565b905082810360a0840152612074818789611f66565b91505061208660c083018560ff169052565b6001600160a01b03831660e08301529c9b505050505050505050505050565b601f8211156120f1576000816000526020600020601f850160051c810160208610156120ce5750805b601f850160051c820191505b818110156120ed578281556001016120da565b5050505b505050565b815167ffffffffffffffff81111561211057612110611b81565b6121248161211e8454611e52565b846120a5565b602080601f83116001811461215957600084156121415750858301515b600019600386901b1c1916600185901b1785556120ed565b600085815260208120601f198616915b8281101561218857888601518255948401946001909101908401612169565b50858210156121a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016121d657634e487b7160e01b600052601160045260246000fd5b5060010190565b8035611b4781611898565b600080600080600080600080610100898b03121561220557600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561222b57600080fd5b6122378c838d01611c38565b975061224560608c016121dd565b965060808b013591508082111561225b57600080fd5b6122678c838d01611bc8565b955060a08b013591508082111561227d57600080fd5b5061228a8b828c01611bc8565b93505061229960c08a01611f3a565b91506122a760e08a016121dd565b90509295985092959890939650565b600083516122c88184602088016118fd565b8351908301906122dc8183602088016118fd565b01949350505050565b600082516122f78184602087016118fd565b919091019291505056fea26469706673582212209bd9d23c2535c2cf1c49c52445db1b25f8a1bdcfe71b2e6ccb86ff2c68c44a4f64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMood(bytes)": {
        "details": "Decodes mood data from bytes and stores it.",
        "params": {
          "_moodData": "Bytes data containing encoded mood information (emojis, theme, colors, etc.)."
        },
        "returns": {
          "_0": "newMoodId The ID of the newly added mood.",
          "_1": "user The address of the user who added the mood."
        }
      },
      "decodeMood(bytes)": {
        "params": {
          "_moodData": "Bytes data containing encoded mood information."
        },
        "returns": {
          "_0": "A Mood struct containing the decoded mood data."
        }
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "params": {
          "_mood": "The Mood struct containing the mood data to encode."
        },
        "returns": {
          "_0": "Bytes data containing the encoded mood information."
        }
      },
      "getMoodById(uint256)": {
        "params": {
          "moodId": "The ID of the mood."
        },
        "returns": {
          "_0": "The Mood struct corresponding to the given mood ID."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMood(bytes)": {
        "notice": "Adds a new mood to the bank."
      },
      "decodeMood(bytes)": {
        "notice": "Decodes mood data from bytes."
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "notice": "Encodes mood data into bytes."
      },
      "getMoodById(uint256)": {
        "notice": "Gets the mood data for a given mood ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 191,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "totalMood",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 195,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "authorized",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 199,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "tokenized",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 203,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 209,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "userMoods",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Mood)836_storage)dyn_storage)"
      },
      {
        "astId": 214,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 219,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodUsers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 224,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToMood",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 228,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 232,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "idToHash",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mood)836_storage)dyn_storage": {
        "base": "t_struct(Mood)836_storage",
        "encoding": "dynamic_array",
        "label": "struct Mood[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Mood)836_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Mood[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Mood)836_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mood)836_storage": {
        "encoding": "inplace",
        "label": "struct Mood",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 825,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "emojis",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 827,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "themeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 829,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "bgColor",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 831,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "fontColor",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 833,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "expansionLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 835,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "user",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}