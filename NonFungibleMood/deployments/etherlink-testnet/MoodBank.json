{
  "address": "0xdc4Ec2Db74EA816cFe15FD7dcE73FfdD820f3CC1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        }
      ],
      "name": "addMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        }
      ],
      "name": "decodeMood",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "_mood",
          "type": "tuple"
        }
      ],
      "name": "encodeMood",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getMoodDataByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodIdOfHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodOfHash",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMoodUserByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        }
      ],
      "name": "getMoodUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "characters",
          "type": "string[]"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hashToMood",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMoods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "themeAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bgColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fontColor",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "expansionLevel",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71f078d059d5b29bc2a75383c33147420c175d00f1f2f4f5f00ccf8995bbaf8a",
  "receipt": {
    "to": null,
    "from": "0x0000704b5427D1BE19059Ee68BAdb88935E6079a",
    "contractAddress": "0xdc4Ec2Db74EA816cFe15FD7dcE73FfdD820f3CC1",
    "transactionIndex": 2,
    "gasUsed": "37193654",
    "logsBloom": "0x00000000000020000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040000080000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000004000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb8aaff2422b566747e3fce3a48fb13fe211b19f6bf2b8782c41943667cdb3596",
    "transactionHash": "0x71f078d059d5b29bc2a75383c33147420c175d00f1f2f4f5f00ccf8995bbaf8a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14395995,
        "transactionHash": "0x71f078d059d5b29bc2a75383c33147420c175d00f1f2f4f5f00ccf8995bbaf8a",
        "address": "0xdc4Ec2Db74EA816cFe15FD7dcE73FfdD820f3CC1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000704b5427d1be19059ee68badb88935e6079a"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xb8aaff2422b566747e3fce3a48fb13fe211b19f6bf2b8782c41943667cdb3596"
      }
    ],
    "blockNumber": 14395995,
    "cumulativeGasUsed": "40635677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9c34daef524d4b7756703655dfa8594d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"}],\"name\":\"addMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"}],\"name\":\"decodeMood\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"_mood\",\"type\":\"tuple\"}],\"name\":\"encodeMood\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getMoodDataByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodIdOfHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodOfHash\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMoodUserByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"}],\"name\":\"getMoodUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"characters\",\"type\":\"string[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashToMood\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMoods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addMood(bytes)\":{\"details\":\"Decodes mood data from bytes and stores it.\",\"params\":{\"_moodData\":\"Bytes data containing encoded mood information (emojis, theme, colors, etc.).\"},\"returns\":{\"_0\":\"newMoodId The ID of the newly added mood.\",\"_1\":\"user The address of the user who added the mood.\"}},\"decodeMood(bytes)\":{\"params\":{\"_moodData\":\"Bytes data containing encoded mood information.\"},\"returns\":{\"_0\":\"A Mood struct containing the decoded mood data.\"}},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"params\":{\"_mood\":\"The Mood struct containing the mood data to encode.\"},\"returns\":{\"_0\":\"Bytes data containing the encoded mood information.\"}},\"getMoodById(uint256)\":{\"params\":{\"moodId\":\"The ID of the mood.\"},\"returns\":{\"_0\":\"The Mood struct corresponding to the given mood ID.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMood(bytes)\":{\"notice\":\"Adds a new mood to the bank.\"},\"decodeMood(bytes)\":{\"notice\":\"Decodes mood data from bytes.\"},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"notice\":\"Encodes mood data into bytes.\"},\"getMoodById(uint256)\":{\"notice\":\"Gets the mood data for a given mood ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MoodBank.sol\":\"MoodBank\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/core/MoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IMoodBank, Mood } from \\\"../interface/IMoodBank.sol\\\";\\r\\n\\r\\ncontract MoodBank is Ownable(msg.sender), IMoodBank {\\r\\n    uint256 public totalMood;\\r\\n\\r\\n    mapping(address => bool) public authorized;\\r\\n\\r\\n    mapping(uint256 => address) public owners;\\r\\n    mapping(address => Mood[]) public userMoods;\\r\\n    mapping(address => uint256[]) public moodIds;\\r\\n    mapping(bytes32 => address[]) public moodUsers;\\r\\n\\r\\n    mapping(bytes32 => string[]) public hashToMood;\\r\\n    mapping(bytes32 => uint256) public hashToId;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Adds a new mood to the bank.\\r\\n    /// @dev Decodes mood data from bytes and stores it.\\r\\n    /// @param _moodData Bytes data containing encoded mood information (emojis, theme, colors, etc.).\\r\\n    /// @return newMoodId The ID of the newly added mood.\\r\\n    /// @return user The address of the user who added the mood.\\r\\n    function addMood(bytes calldata _moodData) external payable returns (uint256, address) {\\r\\n        require(authorized[msg.sender], \\\"Caller not authorized\\\");\\r\\n\\r\\n        Mood memory mood = decodeMood(_moodData);\\r\\n\\r\\n        require(mood.user != address(0), \\\"Zero address\\\");\\r\\n        require(mood.emojis.length > 0, \\\"No emojis\\\");\\r\\n\\r\\n        uint256 newMoodId = totalMood;\\r\\n\\r\\n        userMoods[mood.user].push(mood);\\r\\n        owners[newMoodId] = mood.user;\\r\\n\\r\\n        // It's unclear what the purpose of moodIds is, as the mood ID can be derived from the\\r\\n        // index in the userMoods array. If you need to keep it, make sure the logic is correct.\\r\\n        moodIds[mood.user].push(newMoodId);\\r\\n\\r\\n        bytes32 moodHash = hash(mood.emojis); // Use the correct function name (hash instead of _hash)\\r\\n        moodUsers[moodHash].push(mood.user);\\r\\n\\r\\n        totalMood++;\\r\\n        return (newMoodId, mood.user);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes mood data from bytes.\\r\\n    /// @param _moodData Bytes data containing encoded mood information.\\r\\n    /// @return A Mood struct containing the decoded mood data.\\r\\n    function decodeMood(bytes calldata _moodData) public pure returns (Mood memory) {\\r\\n        (\\r\\n            uint256 chainId,\\r\\n            uint256 timestamp,\\r\\n            string[] memory emojis,\\r\\n            address themeAddress,\\r\\n            string memory bgColor,\\r\\n            string memory fontColor,\\r\\n            uint8 expansionLevel,\\r\\n            address user\\r\\n        ) = abi.decode(_moodData, (uint256, uint256, string[], address, string, string, uint8, address));\\r\\n\\r\\n        return Mood(chainId, timestamp, emojis, themeAddress, bgColor, fontColor, expansionLevel, user);\\r\\n    }\\r\\n\\r\\n    /// @notice Encodes mood data into bytes.\\r\\n    /// @param _mood The Mood struct containing the mood data to encode.\\r\\n    /// @return Bytes data containing the encoded mood information.\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encode(\\r\\n                _mood.chainId,\\r\\n                _mood.timestamp,\\r\\n                _mood.emojis,\\r\\n                _mood.themeAddress,\\r\\n                _mood.bgColor,\\r\\n                _mood.fontColor,\\r\\n                _mood.expansionLevel,\\r\\n                _mood.user\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function authorize(address addr, bool isAuthorized) external onlyOwner {\\r\\n        authorized[addr] = isAuthorized;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the mood data for a given mood ID.\\r\\n    /// @param moodId The ID of the mood.\\r\\n    /// @return The Mood struct corresponding to the given mood ID.\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory) {\\r\\n        // Find the user who owns this moodId\\r\\n        address user = owners[moodId];\\r\\n        require(user != address(0), \\\"Invalid mood ID\\\");\\r\\n\\r\\n        Mood[] storage userMoodsArray = userMoods[user];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i];\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\"); // Revert if no matching mood is found\\r\\n    }\\r\\n\\r\\n    function getOwner(uint256 moodId) external view returns (address) {\\r\\n        return owners[moodId];\\r\\n    }\\r\\n\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256) {\\r\\n        address user = owners[moodId];\\r\\n        require(user != address(0), \\\"Invalid mood ID\\\");\\r\\n        Mood[] storage userMoodsArray = userMoods[user];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i].emojis.length;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\");\\r\\n    }\\r\\n\\r\\n    function getUserMoodLength(address user) external view returns (uint256) {\\r\\n        return userMoods[user].length;\\r\\n    }\\r\\n\\r\\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory) {\\r\\n        require(i < userMoods[user].length, \\\"Index out of bounds\\\"); // Add bounds check\\r\\n        return userMoods[user][i];\\r\\n    }\\r\\n\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory) {\\r\\n        return hashToMood[moodHash];\\r\\n    }\\r\\n\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256) {\\r\\n        return hashToId[moodHash];\\r\\n    }\\r\\n\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash].length;\\r\\n    }\\r\\n\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash][index];\\r\\n    }\\r\\n\\r\\n    function hash(string[] memory characters) public pure returns (bytes32) {\\r\\n        string memory chars;\\r\\n        for (uint256 i = 0; i < characters.length; i++) {\\r\\n            chars = string.concat(chars, characters[i]);\\r\\n        }\\r\\n        return keccak256(abi.encodePacked(chars));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c535d647ed6879003b207e9092dffe8c26a775e288f7dbc8938bf2668a967c6\",\"license\":\"MIT\"},\"contracts/interface/IMoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OnChainVision Contracts\\r\\n\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nstruct Mood {\\r\\n    uint256 chainId;\\r\\n    uint256 timestamp;\\r\\n    string[] emojis;\\r\\n    address themeAddress;\\r\\n    string bgColor;\\r\\n    string fontColor;\\r\\n    uint8 expansionLevel;\\r\\n    address user;\\r\\n}\\r\\n\\r\\ninterface IMoodBank {\\r\\n    function addMood(bytes calldata mood) external payable returns (uint256, address);\\r\\n    function decodeMood(bytes calldata _moodData) external pure returns (Mood memory);\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory);\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory);\\r\\n    function getOwner(uint256 moodId) external view returns (address);\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256);\\r\\n    function getUserMoodLength(address user) external view returns (uint256);\\r\\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory);\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory);\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256);\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256);\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3380bd7961fc3ab5d329cb90ff1e06b5e54353d251e270b337dd76d4ff7b316\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612139806100a56000396000f3fe6080604052600436106101665760003560e01c8063708641c5116100d1578063b91816111161008a578063cea43ab211610064578063cea43ab2146104e7578063db23de9514610507578063ec2aa95314610527578063f2fde38b1461054757600080fd5b8063b918161114610444578063c41a360a14610484578063c9fcf545146104ba57600080fd5b8063708641c514610384578063715018a6146103a457806385556e03146103b95780638da5cb5b146103e65780639a590ddd14610404578063b74252c11461042457600080fd5b80631e3e2d4a116101235780631e3e2d4a1461029857806324ea8bcb146102c55780632d1fb389146102f25780633b0e317f14610314578063672bbf0c146103345780636fcc5bcf1461036457600080fd5b8063025e7c271461016b57806302e33f22146101be578063095f0773146102025780630b9545db1461022f5780630e623e46146102625780631878fcbb14610282575b600080fd5b34801561017757600080fd5b506101a16101863660046116b2565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ca57600080fd5b506101f46101d93660046116e0565b6001600160a01b031660009081526004602052604090205490565b6040519081526020016101b5565b34801561020e57600080fd5b506101f461021d3660046116b2565b60086020526000908152604090205481565b34801561023b57600080fd5b5061024f61024a366004611704565b610567565b6040516101b59796959493929190611780565b34801561026e57600080fd5b506101a161027d3660046117e0565b6106ea565b34801561028e57600080fd5b506101f460015481565b3480156102a457600080fd5b506102b86102b33660046116b2565b610722565b6040516101b5919061185c565b3480156102d157600080fd5b506102e56102e036600461191b565b610a72565b6040516101b59190611957565b3480156102fe57600080fd5b5061031261030d36600461196a565b610b03565b005b34801561032057600080fd5b506101f461032f366004611afe565b610b36565b610347610342366004611b3b565b610b58565b604080519283526001600160a01b039091166020830152016101b5565b34801561037057600080fd5b506102b861037f366004611704565b610dfa565b34801561039057600080fd5b506101f461039f366004611704565b6110f5565b3480156103b057600080fd5b50610312611126565b3480156103c557600080fd5b506103d96103d43660046116b2565b61113a565b6040516101b59190611bad565b3480156103f257600080fd5b506000546001600160a01b03166101a1565b34801561041057600080fd5b506102e561041f3660046117e0565b611226565b34801561043057600080fd5b506101f461043f3660046116b2565b6112df565b34801561045057600080fd5b5061047461045f3660046116e0565b60026020526000908152604090205460ff1681565b60405190151581526020016101b5565b34801561049057600080fd5b506101a161049f3660046116b2565b6000908152600360205260409020546001600160a01b031690565b3480156104c657600080fd5b506101f46104d53660046116b2565b60009081526008602052604090205490565b3480156104f357600080fd5b506102b8610502366004611b3b565b611397565b34801561051357600080fd5b506101a1610522366004611c11565b61140d565b34801561053357600080fd5b506101f4610542366004611afe565b61145a565b34801561055357600080fd5b506103126105623660046116e0565b6114e0565b6004602052816000526040600020818154811061058357600080fd5b600091825260209091206007909102018054600182015460038301546004840180549396509194506001600160a01b031692916105bf90611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611c56565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b50505050509080600501805461064d90611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461067990611c56565b80156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041687565b6006602052816000526040600020818154811061070657600080fd5b6000918252602090912001546001600160a01b03169150829050565b61072a61159b565b6000828152600360205260409020546001600160a01b0316806107865760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600460205260408120905b8154811015610a3857848103610a30578181815481106107c2576107c2611c90565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156108c157838290600052602060002001805461083490611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461086090611c56565b80156108ad5780601f10610882576101008083540402835291602001916108ad565b820191906000526020600020905b81548152906001019060200180831161089057829003601f168201915b505050505081526020019060010190610815565b5050509082525060038201546001600160a01b031660208201526004820180546040909201916108f090611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461091c90611c56565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b5050505050815260200160058201805461098290611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546109ae90611c56565b80156109fb5780601f106109d0576101008083540402835291602001916109fb565b820191906000526020600020905b8154815290600101906020018083116109de57829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b031660409091015295945050505050565b6001016107a0565b5060405162461bcd60e51b815260206004820152600e60248201526d135bdbd9081b9bdd08199bdd5b9960921b604482015260640161077d565b606081356020830135610a886040850185611ca6565b610a9860808701606088016116e0565b610aa56080880188611cf0565b610ab260a08a018a611cf0565b610ac260e08c0160c08d01611d4d565b610ad36101008d0160e08e016116e0565b604051602001610aed9b9a99989796959493929190611d91565b6040516020818303038152906040529050919050565b610b0b61151e565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080610b428361145a565b6000908152600660205260409020549392505050565b33600090815260026020526040812054819060ff16610bb15760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b604482015260640161077d565b6000610bbd8585611397565b60e08101519091506001600160a01b0316610c095760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161077d565b600081604001515111610c4a5760405162461bcd60e51b81526020600482015260096024820152684e6f20656d6f6a697360b81b604482015260640161077d565b6001805460e08301516001600160a01b0316600090815260046020908152604080832080548087018255908452928290208651600790940201928355818601519483019490945592840151805192938593610cab92600285019201906115f5565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560808201516004820190610ce69082611ef8565b5060a08201516005820190610cfb9082611ef8565b5060c0820151600691909101805460e09384015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790559083018051600084815260036020908152604080832080546001600160a01b0319169487169490941790935592519093168352600582528083208054600181018255908452918320909101839055830151610d8d9061145a565b6000818152600660209081526040822060e087015181546001808201845592855292842090920180546001600160a01b0319166001600160a01b0390931692909217909155805492935090610de183611fb8565b90915550505060e09091015190925090505b9250929050565b610e0261159b565b6001600160a01b0383166000908152600460205260409020548210610e5f5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161077d565b6001600160a01b0383166000908152600460205260409020805483908110610e8957610e89611c90565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610f88578382906000526020600020018054610efb90611c56565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790611c56565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b505050505081526020019060010190610edc565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610fb790611c56565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe390611c56565b80156110305780601f1061100557610100808354040283529160200191611030565b820191906000526020600020905b81548152906001019060200180831161101357829003601f168201915b5050505050815260200160058201805461104990611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461107590611c56565b80156110c25780601f10611097576101008083540402835291602001916110c2565b820191906000526020600020905b8154815290600101906020018083116110a557829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b03166040909101529392505050565b6005602052816000526040600020818154811061111157600080fd5b90600052602060002001600091509150505481565b61112e61151e565b611138600061154b565b565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561121b57838290600052602060002001805461118e90611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546111ba90611c56565b80156112075780601f106111dc57610100808354040283529160200191611207565b820191906000526020600020905b8154815290600101906020018083116111ea57829003601f168201915b50505050508152602001906001019061116f565b505050509050919050565b6007602052816000526040600020818154811061124257600080fd5b9060005260206000200160009150915050805461125e90611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90611c56565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b0316806113365760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b604482015260640161077d565b6001600160a01b0381166000908152600460205260408120905b8154811015610a385784810361138f5781818154811061137257611372611c90565b600091825260209091206002600790920201015495945050505050565b600101611350565b61139f61159b565b6000808080808080806113b48a8c018c611fea565b60408051610100810182529889526020890197909752958701949094526001600160a01b039283166060870152608086019190915260a085015260ff90911660c08401521660e08201529b9a5050505050505050505050565b6000806114198461145a565b60008181526006602052604090208054919250908490811061143d5761143d611c90565b6000918252602090912001546001600160a01b0316949350505050565b6000606060005b83518110156114b0578184828151811061147d5761147d611c90565b60200260200101516040516020016114969291906120b8565b60408051601f198184030181529190529150600101611461565b50806040516020016114c291906120e7565b60405160208183030381529060405280519060200120915050919050565b6114e861151e565b6001600160a01b03811661151257604051631e4fbdf760e01b81526000600482015260240161077d565b61151b8161154b565b50565b6000546001600160a01b031633146111385760405163118cdaa760e01b815233600482015260240161077d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016060815260200160608152602001600060ff16815260200160006001600160a01b031681525090565b82805482825590600052602060002090810192821561163b579160200282015b8281111561163b578251829061162b9082611ef8565b5091602001919060010190611615565b5061164792915061164b565b5090565b8082111561164757600061165f8282611668565b5060010161164b565b50805461167490611c56565b6000825580601f10611684575050565b601f01602090049060005260206000209081019061151b91905b80821115611647576000815560010161169e565b6000602082840312156116c457600080fd5b5035919050565b6001600160a01b038116811461151b57600080fd5b6000602082840312156116f257600080fd5b81356116fd816116cb565b9392505050565b6000806040838503121561171757600080fd5b8235611722816116cb565b946020939093013593505050565b60005b8381101561174b578181015183820152602001611733565b50506000910152565b6000815180845261176c816020860160208601611730565b601f01601f19169290920160200192915050565b878152866020820152600060018060a01b03808816604084015260e060608401526117ae60e0840188611754565b83810360808501526117c08188611754565b60ff9690961660a0850152509290921660c0909101525095945050505050565b600080604083850312156117f357600080fd5b50508035926020909101359150565b60008282518085526020808601955060208260051b8401016020860160005b8481101561184f57601f1986840301895261183d838351611754565b98840198925090830190600101611821565b5090979650505050505050565b6020815281516020820152602082015160408201526000604083015161010080606085015261188f610120850183611802565b915060608501516118ab60808601826001600160a01b03169052565b506080850151601f19808685030160a08701526118c88483611754565b935060a08701519150808685030160c0870152506118e68382611754565b92505060c08501516118fd60e086018260ff169052565b5060e08501516001600160a01b038116858301525090949350505050565b60006020828403121561192d57600080fd5b813567ffffffffffffffff81111561194457600080fd5b820161010081850312156116fd57600080fd5b6020815260006116fd6020830184611754565b6000806040838503121561197d57600080fd5b8235611988816116cb565b91506020830135801515811461199d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119e7576119e76119a8565b604052919050565b600082601f830112611a0057600080fd5b813567ffffffffffffffff811115611a1a57611a1a6119a8565b611a2d601f8201601f19166020016119be565b818152846020838601011115611a4257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611a7057600080fd5b8135602067ffffffffffffffff80831115611a8d57611a8d6119a8565b8260051b611a9c8382016119be565b9384528581018301938381019088861115611ab657600080fd5b84880192505b85831015611af257823584811115611ad45760008081fd5b611ae28a87838c01016119ef565b8352509184019190840190611abc565b98975050505050505050565b600060208284031215611b1057600080fd5b813567ffffffffffffffff811115611b2757600080fd5b611b3384828501611a5f565b949350505050565b60008060208385031215611b4e57600080fd5b823567ffffffffffffffff80821115611b6657600080fd5b818501915085601f830112611b7a57600080fd5b813581811115611b8957600080fd5b866020828501011115611b9b57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611c0457603f19888603018452611bf2858351611754565b94509285019290850190600101611bd6565b5092979650505050505050565b60008060408385031215611c2457600080fd5b823567ffffffffffffffff811115611c3b57600080fd5b611c4785828601611a5f565b95602094909401359450505050565b600181811c90821680611c6a57607f821691505b602082108103611c8a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611cbd57600080fd5b83018035915067ffffffffffffffff821115611cd857600080fd5b6020019150600581901b3603821315610df357600080fd5b6000808335601e19843603018112611d0757600080fd5b83018035915067ffffffffffffffff821115611d2257600080fd5b602001915036819003821315610df357600080fd5b803560ff81168114611d4857600080fd5b919050565b600060208284031215611d5f57600080fd5b6116fd82611d37565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061010082018d83528c60208401526101006040840152808b8252610120840190506101208c60051b85010191508c60005b8d811015611e3c5785840361011f19018352368f9003601e1901823512611dea57600080fd5b8e823501803560208201915067ffffffffffffffff811115611e0b57600080fd5b803603821315611e1a57600080fd5b611e25868284611d68565b955050506020928301929190910190600101611dc4565b5050506001600160a01b038a1660608401528281036080840152611e6181898b611d68565b905082810360a0840152611e76818789611d68565b915050611e8860c083018560ff169052565b6001600160a01b03831660e08301529c9b505050505050505050505050565b601f821115611ef3576000816000526020600020601f850160051c81016020861015611ed05750805b601f850160051c820191505b81811015611eef57828155600101611edc565b5050505b505050565b815167ffffffffffffffff811115611f1257611f126119a8565b611f2681611f208454611c56565b84611ea7565b602080601f831160018114611f5b5760008415611f435750858301515b600019600386901b1c1916600185901b178555611eef565b600085815260208120601f198616915b82811015611f8a57888601518255948401946001909101908401611f6b565b5085821015611fa85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611fd857634e487b7160e01b600052601160045260246000fd5b5060010190565b8035611d48816116cb565b600080600080600080600080610100898b03121561200757600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561202d57600080fd5b6120398c838d01611a5f565b975061204760608c01611fdf565b965060808b013591508082111561205d57600080fd5b6120698c838d016119ef565b955060a08b013591508082111561207f57600080fd5b5061208c8b828c016119ef565b93505061209b60c08a01611d37565b91506120a960e08a01611fdf565b90509295985092959890939650565b600083516120ca818460208801611730565b8351908301906120de818360208801611730565b01949350505050565b600082516120f9818460208701611730565b919091019291505056fea26469706673582212203c6fd50954c4a50f0581caa046d20e62465f88baa9aba98ab78a477fe0b4d04864736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c8063708641c5116100d1578063b91816111161008a578063cea43ab211610064578063cea43ab2146104e7578063db23de9514610507578063ec2aa95314610527578063f2fde38b1461054757600080fd5b8063b918161114610444578063c41a360a14610484578063c9fcf545146104ba57600080fd5b8063708641c514610384578063715018a6146103a457806385556e03146103b95780638da5cb5b146103e65780639a590ddd14610404578063b74252c11461042457600080fd5b80631e3e2d4a116101235780631e3e2d4a1461029857806324ea8bcb146102c55780632d1fb389146102f25780633b0e317f14610314578063672bbf0c146103345780636fcc5bcf1461036457600080fd5b8063025e7c271461016b57806302e33f22146101be578063095f0773146102025780630b9545db1461022f5780630e623e46146102625780631878fcbb14610282575b600080fd5b34801561017757600080fd5b506101a16101863660046116b2565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ca57600080fd5b506101f46101d93660046116e0565b6001600160a01b031660009081526004602052604090205490565b6040519081526020016101b5565b34801561020e57600080fd5b506101f461021d3660046116b2565b60086020526000908152604090205481565b34801561023b57600080fd5b5061024f61024a366004611704565b610567565b6040516101b59796959493929190611780565b34801561026e57600080fd5b506101a161027d3660046117e0565b6106ea565b34801561028e57600080fd5b506101f460015481565b3480156102a457600080fd5b506102b86102b33660046116b2565b610722565b6040516101b5919061185c565b3480156102d157600080fd5b506102e56102e036600461191b565b610a72565b6040516101b59190611957565b3480156102fe57600080fd5b5061031261030d36600461196a565b610b03565b005b34801561032057600080fd5b506101f461032f366004611afe565b610b36565b610347610342366004611b3b565b610b58565b604080519283526001600160a01b039091166020830152016101b5565b34801561037057600080fd5b506102b861037f366004611704565b610dfa565b34801561039057600080fd5b506101f461039f366004611704565b6110f5565b3480156103b057600080fd5b50610312611126565b3480156103c557600080fd5b506103d96103d43660046116b2565b61113a565b6040516101b59190611bad565b3480156103f257600080fd5b506000546001600160a01b03166101a1565b34801561041057600080fd5b506102e561041f3660046117e0565b611226565b34801561043057600080fd5b506101f461043f3660046116b2565b6112df565b34801561045057600080fd5b5061047461045f3660046116e0565b60026020526000908152604090205460ff1681565b60405190151581526020016101b5565b34801561049057600080fd5b506101a161049f3660046116b2565b6000908152600360205260409020546001600160a01b031690565b3480156104c657600080fd5b506101f46104d53660046116b2565b60009081526008602052604090205490565b3480156104f357600080fd5b506102b8610502366004611b3b565b611397565b34801561051357600080fd5b506101a1610522366004611c11565b61140d565b34801561053357600080fd5b506101f4610542366004611afe565b61145a565b34801561055357600080fd5b506103126105623660046116e0565b6114e0565b6004602052816000526040600020818154811061058357600080fd5b600091825260209091206007909102018054600182015460038301546004840180549396509194506001600160a01b031692916105bf90611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611c56565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b50505050509080600501805461064d90611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461067990611c56565b80156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041687565b6006602052816000526040600020818154811061070657600080fd5b6000918252602090912001546001600160a01b03169150829050565b61072a61159b565b6000828152600360205260409020546001600160a01b0316806107865760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600460205260408120905b8154811015610a3857848103610a30578181815481106107c2576107c2611c90565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156108c157838290600052602060002001805461083490611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461086090611c56565b80156108ad5780601f10610882576101008083540402835291602001916108ad565b820191906000526020600020905b81548152906001019060200180831161089057829003601f168201915b505050505081526020019060010190610815565b5050509082525060038201546001600160a01b031660208201526004820180546040909201916108f090611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461091c90611c56565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b5050505050815260200160058201805461098290611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546109ae90611c56565b80156109fb5780601f106109d0576101008083540402835291602001916109fb565b820191906000526020600020905b8154815290600101906020018083116109de57829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b031660409091015295945050505050565b6001016107a0565b5060405162461bcd60e51b815260206004820152600e60248201526d135bdbd9081b9bdd08199bdd5b9960921b604482015260640161077d565b606081356020830135610a886040850185611ca6565b610a9860808701606088016116e0565b610aa56080880188611cf0565b610ab260a08a018a611cf0565b610ac260e08c0160c08d01611d4d565b610ad36101008d0160e08e016116e0565b604051602001610aed9b9a99989796959493929190611d91565b6040516020818303038152906040529050919050565b610b0b61151e565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080610b428361145a565b6000908152600660205260409020549392505050565b33600090815260026020526040812054819060ff16610bb15760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b604482015260640161077d565b6000610bbd8585611397565b60e08101519091506001600160a01b0316610c095760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161077d565b600081604001515111610c4a5760405162461bcd60e51b81526020600482015260096024820152684e6f20656d6f6a697360b81b604482015260640161077d565b6001805460e08301516001600160a01b0316600090815260046020908152604080832080548087018255908452928290208651600790940201928355818601519483019490945592840151805192938593610cab92600285019201906115f5565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560808201516004820190610ce69082611ef8565b5060a08201516005820190610cfb9082611ef8565b5060c0820151600691909101805460e09384015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790559083018051600084815260036020908152604080832080546001600160a01b0319169487169490941790935592519093168352600582528083208054600181018255908452918320909101839055830151610d8d9061145a565b6000818152600660209081526040822060e087015181546001808201845592855292842090920180546001600160a01b0319166001600160a01b0390931692909217909155805492935090610de183611fb8565b90915550505060e09091015190925090505b9250929050565b610e0261159b565b6001600160a01b0383166000908152600460205260409020548210610e5f5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161077d565b6001600160a01b0383166000908152600460205260409020805483908110610e8957610e89611c90565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610f88578382906000526020600020018054610efb90611c56565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790611c56565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b505050505081526020019060010190610edc565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610fb790611c56565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe390611c56565b80156110305780601f1061100557610100808354040283529160200191611030565b820191906000526020600020905b81548152906001019060200180831161101357829003601f168201915b5050505050815260200160058201805461104990611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461107590611c56565b80156110c25780601f10611097576101008083540402835291602001916110c2565b820191906000526020600020905b8154815290600101906020018083116110a557829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b03166040909101529392505050565b6005602052816000526040600020818154811061111157600080fd5b90600052602060002001600091509150505481565b61112e61151e565b611138600061154b565b565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561121b57838290600052602060002001805461118e90611c56565b80601f01602080910402602001604051908101604052809291908181526020018280546111ba90611c56565b80156112075780601f106111dc57610100808354040283529160200191611207565b820191906000526020600020905b8154815290600101906020018083116111ea57829003601f168201915b50505050508152602001906001019061116f565b505050509050919050565b6007602052816000526040600020818154811061124257600080fd5b9060005260206000200160009150915050805461125e90611c56565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90611c56565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b0316806113365760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b604482015260640161077d565b6001600160a01b0381166000908152600460205260408120905b8154811015610a385784810361138f5781818154811061137257611372611c90565b600091825260209091206002600790920201015495945050505050565b600101611350565b61139f61159b565b6000808080808080806113b48a8c018c611fea565b60408051610100810182529889526020890197909752958701949094526001600160a01b039283166060870152608086019190915260a085015260ff90911660c08401521660e08201529b9a5050505050505050505050565b6000806114198461145a565b60008181526006602052604090208054919250908490811061143d5761143d611c90565b6000918252602090912001546001600160a01b0316949350505050565b6000606060005b83518110156114b0578184828151811061147d5761147d611c90565b60200260200101516040516020016114969291906120b8565b60408051601f198184030181529190529150600101611461565b50806040516020016114c291906120e7565b60405160208183030381529060405280519060200120915050919050565b6114e861151e565b6001600160a01b03811661151257604051631e4fbdf760e01b81526000600482015260240161077d565b61151b8161154b565b50565b6000546001600160a01b031633146111385760405163118cdaa760e01b815233600482015260240161077d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016060815260200160608152602001600060ff16815260200160006001600160a01b031681525090565b82805482825590600052602060002090810192821561163b579160200282015b8281111561163b578251829061162b9082611ef8565b5091602001919060010190611615565b5061164792915061164b565b5090565b8082111561164757600061165f8282611668565b5060010161164b565b50805461167490611c56565b6000825580601f10611684575050565b601f01602090049060005260206000209081019061151b91905b80821115611647576000815560010161169e565b6000602082840312156116c457600080fd5b5035919050565b6001600160a01b038116811461151b57600080fd5b6000602082840312156116f257600080fd5b81356116fd816116cb565b9392505050565b6000806040838503121561171757600080fd5b8235611722816116cb565b946020939093013593505050565b60005b8381101561174b578181015183820152602001611733565b50506000910152565b6000815180845261176c816020860160208601611730565b601f01601f19169290920160200192915050565b878152866020820152600060018060a01b03808816604084015260e060608401526117ae60e0840188611754565b83810360808501526117c08188611754565b60ff9690961660a0850152509290921660c0909101525095945050505050565b600080604083850312156117f357600080fd5b50508035926020909101359150565b60008282518085526020808601955060208260051b8401016020860160005b8481101561184f57601f1986840301895261183d838351611754565b98840198925090830190600101611821565b5090979650505050505050565b6020815281516020820152602082015160408201526000604083015161010080606085015261188f610120850183611802565b915060608501516118ab60808601826001600160a01b03169052565b506080850151601f19808685030160a08701526118c88483611754565b935060a08701519150808685030160c0870152506118e68382611754565b92505060c08501516118fd60e086018260ff169052565b5060e08501516001600160a01b038116858301525090949350505050565b60006020828403121561192d57600080fd5b813567ffffffffffffffff81111561194457600080fd5b820161010081850312156116fd57600080fd5b6020815260006116fd6020830184611754565b6000806040838503121561197d57600080fd5b8235611988816116cb565b91506020830135801515811461199d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119e7576119e76119a8565b604052919050565b600082601f830112611a0057600080fd5b813567ffffffffffffffff811115611a1a57611a1a6119a8565b611a2d601f8201601f19166020016119be565b818152846020838601011115611a4257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611a7057600080fd5b8135602067ffffffffffffffff80831115611a8d57611a8d6119a8565b8260051b611a9c8382016119be565b9384528581018301938381019088861115611ab657600080fd5b84880192505b85831015611af257823584811115611ad45760008081fd5b611ae28a87838c01016119ef565b8352509184019190840190611abc565b98975050505050505050565b600060208284031215611b1057600080fd5b813567ffffffffffffffff811115611b2757600080fd5b611b3384828501611a5f565b949350505050565b60008060208385031215611b4e57600080fd5b823567ffffffffffffffff80821115611b6657600080fd5b818501915085601f830112611b7a57600080fd5b813581811115611b8957600080fd5b866020828501011115611b9b57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611c0457603f19888603018452611bf2858351611754565b94509285019290850190600101611bd6565b5092979650505050505050565b60008060408385031215611c2457600080fd5b823567ffffffffffffffff811115611c3b57600080fd5b611c4785828601611a5f565b95602094909401359450505050565b600181811c90821680611c6a57607f821691505b602082108103611c8a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611cbd57600080fd5b83018035915067ffffffffffffffff821115611cd857600080fd5b6020019150600581901b3603821315610df357600080fd5b6000808335601e19843603018112611d0757600080fd5b83018035915067ffffffffffffffff821115611d2257600080fd5b602001915036819003821315610df357600080fd5b803560ff81168114611d4857600080fd5b919050565b600060208284031215611d5f57600080fd5b6116fd82611d37565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061010082018d83528c60208401526101006040840152808b8252610120840190506101208c60051b85010191508c60005b8d811015611e3c5785840361011f19018352368f9003601e1901823512611dea57600080fd5b8e823501803560208201915067ffffffffffffffff811115611e0b57600080fd5b803603821315611e1a57600080fd5b611e25868284611d68565b955050506020928301929190910190600101611dc4565b5050506001600160a01b038a1660608401528281036080840152611e6181898b611d68565b905082810360a0840152611e76818789611d68565b915050611e8860c083018560ff169052565b6001600160a01b03831660e08301529c9b505050505050505050505050565b601f821115611ef3576000816000526020600020601f850160051c81016020861015611ed05750805b601f850160051c820191505b81811015611eef57828155600101611edc565b5050505b505050565b815167ffffffffffffffff811115611f1257611f126119a8565b611f2681611f208454611c56565b84611ea7565b602080601f831160018114611f5b5760008415611f435750858301515b600019600386901b1c1916600185901b178555611eef565b600085815260208120601f198616915b82811015611f8a57888601518255948401946001909101908401611f6b565b5085821015611fa85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611fd857634e487b7160e01b600052601160045260246000fd5b5060010190565b8035611d48816116cb565b600080600080600080600080610100898b03121561200757600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561202d57600080fd5b6120398c838d01611a5f565b975061204760608c01611fdf565b965060808b013591508082111561205d57600080fd5b6120698c838d016119ef565b955060a08b013591508082111561207f57600080fd5b5061208c8b828c016119ef565b93505061209b60c08a01611d37565b91506120a960e08a01611fdf565b90509295985092959890939650565b600083516120ca818460208801611730565b8351908301906120de818360208801611730565b01949350505050565b600082516120f9818460208701611730565b919091019291505056fea26469706673582212203c6fd50954c4a50f0581caa046d20e62465f88baa9aba98ab78a477fe0b4d04864736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMood(bytes)": {
        "details": "Decodes mood data from bytes and stores it.",
        "params": {
          "_moodData": "Bytes data containing encoded mood information (emojis, theme, colors, etc.)."
        },
        "returns": {
          "_0": "newMoodId The ID of the newly added mood.",
          "_1": "user The address of the user who added the mood."
        }
      },
      "decodeMood(bytes)": {
        "params": {
          "_moodData": "Bytes data containing encoded mood information."
        },
        "returns": {
          "_0": "A Mood struct containing the decoded mood data."
        }
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "params": {
          "_mood": "The Mood struct containing the mood data to encode."
        },
        "returns": {
          "_0": "Bytes data containing the encoded mood information."
        }
      },
      "getMoodById(uint256)": {
        "params": {
          "moodId": "The ID of the mood."
        },
        "returns": {
          "_0": "The Mood struct corresponding to the given mood ID."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMood(bytes)": {
        "notice": "Adds a new mood to the bank."
      },
      "decodeMood(bytes)": {
        "notice": "Decodes mood data from bytes."
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "notice": "Encodes mood data into bytes."
      },
      "getMoodById(uint256)": {
        "notice": "Gets the mood data for a given mood ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3534,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10274,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "totalMood",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10278,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "authorized",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10282,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10288,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "userMoods",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Mood)10841_storage)dyn_storage)"
      },
      {
        "astId": 10293,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10298,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10303,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToMood",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 10307,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToId",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mood)10841_storage)dyn_storage": {
        "base": "t_struct(Mood)10841_storage",
        "encoding": "dynamic_array",
        "label": "struct Mood[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Mood)10841_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Mood[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Mood)10841_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mood)10841_storage": {
        "encoding": "inplace",
        "label": "struct Mood",
        "members": [
          {
            "astId": 10825,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10827,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10830,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "emojis",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 10832,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "themeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10834,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "bgColor",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 10836,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "fontColor",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 10838,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "expansionLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 10840,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "user",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}