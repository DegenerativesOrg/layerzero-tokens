{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/core/MoodBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.22;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { IMoodBank, Mood } from \"../interface/IMoodBank.sol\";\r\n\r\ncontract MoodBank is Ownable(msg.sender), IMoodBank {\r\n    uint256 public totalMood;\r\n\r\n    mapping(address => bool) public authorized;\r\n    mapping(bytes32 => bool) public tokenized;\r\n\r\n    mapping(uint256 => address) public owners;\r\n    mapping(address => Mood[]) public userMoods;\r\n    mapping(address => uint256[]) public moodIds;\r\n    mapping(bytes32 => address[]) public moodUsers;\r\n\r\n    mapping(bytes32 => string[]) public hashToMood;\r\n    mapping(bytes32 => uint256) public hashToId;\r\n    mapping(uint256 => bytes32) public idToHash;\r\n\r\n    constructor() {}\r\n\r\n    /// @notice Adds a new mood to the bank.\r\n    /// @dev Decodes mood data from bytes and stores it.\r\n    /// @param _moodData Bytes data containing encoded mood information (emojis, theme, colors, etc.).\r\n    /// @return newMoodId The ID of the newly added mood.\r\n    /// @return user The address of the user who added the mood.\r\n    function addMood(bytes calldata _moodData) external payable returns (uint256, address, bool) {\r\n        require(authorized[msg.sender], \"Caller not authorized\");\r\n\r\n        Mood memory mood = decodeMood(_moodData);\r\n\r\n        require(mood.user != address(0), \"Zero address\");\r\n        require(mood.emojis.length > 0, \"No emojis\");\r\n\r\n        uint256 newMoodId = totalMood;\r\n\r\n        userMoods[mood.user].push(mood);\r\n        owners[newMoodId] = mood.user;\r\n\r\n        // It's unclear what the purpose of moodIds is, as the mood ID can be derived from the\r\n        // index in the userMoods array. If you need to keep it, make sure the logic is correct.\r\n        moodIds[mood.user].push(newMoodId);\r\n\r\n        bytes32 moodHash = hash(mood.emojis); // Use the correct function name (hash instead of _hash)\r\n        moodUsers[moodHash].push(mood.user);\r\n        idToHash[newMoodId] = moodHash;\r\n\r\n        bool isTokenized;\r\n        isTokenized = tokenized[moodHash];\r\n        if (!isTokenized) {\r\n            tokenized[moodHash] = true;\r\n        }\r\n\r\n        totalMood++;\r\n        return (newMoodId, mood.user, isTokenized);\r\n    }\r\n\r\n    /// @notice Decodes mood data from bytes.\r\n    /// @param _moodData Bytes data containing encoded mood information.\r\n    /// @return A Mood struct containing the decoded mood data.\r\n    function decodeMood(bytes calldata _moodData) public pure returns (Mood memory) {\r\n        (\r\n            uint256 chainId,\r\n            uint256 timestamp,\r\n            string[] memory emojis,\r\n            address themeAddress,\r\n            string memory bgColor,\r\n            string memory fontColor,\r\n            uint8 expansionLevel,\r\n            address user\r\n        ) = abi.decode(_moodData, (uint256, uint256, string[], address, string, string, uint8, address));\r\n\r\n        return Mood(chainId, timestamp, emojis, themeAddress, bgColor, fontColor, expansionLevel, user);\r\n    }\r\n\r\n    /// @notice Encodes mood data into bytes.\r\n    /// @param _mood The Mood struct containing the mood data to encode.\r\n    /// @return Bytes data containing the encoded mood information.\r\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory) {\r\n        return\r\n            abi.encode(\r\n                _mood.chainId,\r\n                _mood.timestamp,\r\n                _mood.emojis,\r\n                _mood.themeAddress,\r\n                _mood.bgColor,\r\n                _mood.fontColor,\r\n                _mood.expansionLevel,\r\n                _mood.user\r\n            );\r\n    }\r\n\r\n    function setTokenized(Mood calldata _mood) external pure returns (bytes memory) {\r\n        return\r\n            abi.encode(\r\n                _mood.chainId,\r\n                _mood.timestamp,\r\n                _mood.emojis,\r\n                _mood.themeAddress,\r\n                _mood.bgColor,\r\n                _mood.fontColor,\r\n                _mood.expansionLevel,\r\n                _mood.user\r\n            );\r\n    }\r\n\r\n    function authorize(address addr, bool isAuthorized) external onlyOwner {\r\n        authorized[addr] = isAuthorized;\r\n    }\r\n\r\n    function tokenize(bytes32 moodHash, bool isTokenized) external {\r\n        require(authorized[msg.sender], \"Caller not authorized\");\r\n        tokenized[moodHash] = isTokenized;\r\n    }\r\n\r\n    /// @notice Gets the mood data for a given mood ID.\r\n    /// @param moodId The ID of the mood.\r\n    /// @return The Mood struct corresponding to the given mood ID.\r\n    function getMoodById(uint256 moodId) external view returns (Mood memory) {\r\n        // Find the user who owns this moodId\r\n        address user = owners[moodId];\r\n        require(user != address(0), \"Invalid mood ID\");\r\n\r\n        Mood[] storage userMoodsArray = userMoods[user];\r\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\r\n            if (i == moodId) {\r\n                return userMoodsArray[i];\r\n            }\r\n        }\r\n        revert(\"Mood not found\"); // Revert if no matching mood is found\r\n    }\r\n\r\n    function getOwner(uint256 moodId) external view returns (address) {\r\n        return owners[moodId];\r\n    }\r\n\r\n    function getMoodLength(uint256 moodId) external view returns (uint256) {\r\n        address user = owners[moodId];\r\n        require(user != address(0), \"Invalid mood ID\");\r\n        Mood[] storage userMoodsArray = userMoods[user];\r\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\r\n            if (i == moodId) {\r\n                return userMoodsArray[i].emojis.length;\r\n            }\r\n        }\r\n        revert(\"Mood not found\");\r\n    }\r\n\r\n    function getUserMoodLength(address user) external view returns (uint256) {\r\n        return userMoods[user].length;\r\n    }\r\n\r\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory) {\r\n        require(i < userMoods[user].length, \"Index out of bounds\"); // Add bounds check\r\n        return userMoods[user][i];\r\n    }\r\n\r\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory) {\r\n        return hashToMood[moodHash];\r\n    }\r\n\r\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256) {\r\n        return hashToId[moodHash];\r\n    }\r\n\r\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32) {\r\n        return idToHash[moodId];\r\n    }\r\n\r\n    function getMoodUserCount(string[] memory mood) external view returns (uint256) {\r\n        bytes32 moodHash = hash(mood);\r\n        return moodUsers[moodHash].length;\r\n    }\r\n\r\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address) {\r\n        bytes32 moodHash = hash(mood);\r\n        return moodUsers[moodHash][index];\r\n    }\r\n\r\n    function hash(string[] memory characters) public pure returns (bytes32) {\r\n        string memory chars;\r\n        for (uint256 i = 0; i < characters.length; i++) {\r\n            chars = string.concat(chars, characters[i]);\r\n        }\r\n        return keccak256(abi.encodePacked(chars));\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IMoodBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OnChainVision Contracts\r\n\r\npragma solidity ^0.8.22;\r\n\r\nstruct Mood {\r\n    uint256 chainId;\r\n    uint256 timestamp;\r\n    string[] emojis;\r\n    address themeAddress;\r\n    string bgColor;\r\n    string fontColor;\r\n    uint8 expansionLevel;\r\n    address user;\r\n}\r\n\r\ninterface IMoodBank {\r\n    function addMood(bytes calldata mood) external payable returns (uint256, address, bool);\r\n    function decodeMood(bytes calldata _moodData) external pure returns (Mood memory);\r\n    function tokenize(bytes32 moodHash, bool isTokenized) external;\r\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory);\r\n    function getMoodById(uint256 moodId) external view returns (Mood memory);\r\n    function getOwner(uint256 moodId) external view returns (address);\r\n    function getMoodLength(uint256 moodId) external view returns (uint256);\r\n    function getUserMoodLength(address user) external view returns (uint256);\r\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory);\r\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory);\r\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256);\r\n    function getMoodUserCount(string[] memory mood) external view returns (uint256);\r\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32);\r\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}