{
  "address": "0xe4592b2C395EEA41Ed98ab406d11CEe82136232f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_tokenize",
          "type": "bool"
        }
      ],
      "name": "addMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_moodData",
          "type": "bytes"
        }
      ],
      "name": "decodeMood",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "_mood",
          "type": "tuple"
        }
      ],
      "name": "encodeMood",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getHashByMoodId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getMoodDataByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "emojis",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "themeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bgColor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fontColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "expansionLevel",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct Mood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodIdOfHash",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "getMoodOfHash",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMoodUserByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "mood",
          "type": "string[]"
        }
      ],
      "name": "getMoodUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moodId",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getUserMoodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "characters",
          "type": "string[]"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hashToIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hashToMood",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        }
      ],
      "name": "isTokenized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "moodUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "moodHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_tokenized",
          "type": "bool"
        }
      ],
      "name": "tokenize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenizedBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMood",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMoods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "themeAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bgColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fontColor",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "expansionLevel",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1bd7ac17162214bd9aa5eea0d57ad187a129250853dbe5e2e28f71f226d4ad5",
  "receipt": {
    "to": null,
    "from": "0x0000704b5427D1BE19059Ee68BAdb88935E6079a",
    "contractAddress": "0xe4592b2C395EEA41Ed98ab406d11CEe82136232f",
    "transactionIndex": 3,
    "gasUsed": "2113597",
    "logsBloom": "0x
    "blockHash": "0x1990db4e7b0085379b2fa287c910ca7da86177b631a8c7a05740ba7e2324d5da",
    "transactionHash": "0xa1bd7ac17162214bd9aa5eea0d57ad187a129250853dbe5e2e28f71f226d4ad5",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 18617262,
        "transactionHash": "0xa1bd7ac17162214bd9aa5eea0d57ad187a129250853dbe5e2e28f71f226d4ad5",
        "address": "0xe4592b2C395EEA41Ed98ab406d11CEe82136232f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000704b5427d1be19059ee68badb88935e6079a"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x1990db4e7b0085379b2fa287c910ca7da86177b631a8c7a05740ba7e2324d5da"
      }
    ],
    "blockNumber": 18617262,
    "cumulativeGasUsed": "2326760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "c6418608421a27a255c885d2bd0da12d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_tokenize\",\"type\":\"bool\"}],\"name\":\"addMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_moodData\",\"type\":\"bytes\"}],\"name\":\"decodeMood\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"_mood\",\"type\":\"tuple\"}],\"name\":\"encodeMood\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getHashByMoodId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getMoodDataByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"emojis\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Mood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodIdOfHash\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"getMoodOfHash\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMoodUserByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"mood\",\"type\":\"string[]\"}],\"name\":\"getMoodUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moodId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getUserMoodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"characters\",\"type\":\"string[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashToMood\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"}],\"name\":\"isTokenized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moodUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"moodHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_tokenized\",\"type\":\"bool\"}],\"name\":\"tokenize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenizedBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMoods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"themeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bgColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"expansionLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addMood(bytes,bool)\":{\"details\":\"Decodes mood data from bytes and stores it.\",\"params\":{\"_moodData\":\"Bytes data containing encoded mood information (emojis, theme, colors, etc.).\"},\"returns\":{\"_0\":\"newMoodId The ID of the newly added mood.\",\"_1\":\"creator The address of the creator who added the mood.\"}},\"decodeMood(bytes)\":{\"params\":{\"_moodData\":\"Bytes data containing encoded mood information.\"},\"returns\":{\"_0\":\"A Mood struct containing the decoded mood data.\"}},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"params\":{\"_mood\":\"The Mood struct containing the mood data to encode.\"},\"returns\":{\"_0\":\"Bytes data containing the encoded mood information.\"}},\"getMoodById(uint256)\":{\"params\":{\"moodId\":\"The ID of the mood.\"},\"returns\":{\"_0\":\"The Mood struct corresponding to the given mood ID.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMood(bytes,bool)\":{\"notice\":\"Adds a new mood to the bank.\"},\"decodeMood(bytes)\":{\"notice\":\"Decodes mood data from bytes.\"},\"encodeMood((uint256,uint256,string[],address,string,string,uint8,address))\":{\"notice\":\"Encodes mood data into bytes.\"},\"getMoodById(uint256)\":{\"notice\":\"Gets the mood data for a given mood ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MoodBank.sol\":\"MoodBank\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/core/MoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IMoodBank, Mood } from \\\"../interface/IMoodBank.sol\\\";\\r\\n\\r\\ncontract MoodBank is Ownable(msg.sender), IMoodBank {\\r\\n    uint256 public totalMood;\\r\\n\\r\\n    mapping(address => bool) public authorized;\\r\\n    mapping(bytes32 => bool) public tokenized;\\r\\n    mapping(bytes32 => uint256) public tokenizedBy;\\r\\n\\r\\n    mapping(uint256 => address) public creators;\\r\\n    mapping(address => Mood[]) public userMoods;\\r\\n    mapping(address => uint256[]) public moodIds;\\r\\n    mapping(bytes32 => address[]) public moodUsers;\\r\\n\\r\\n    mapping(bytes32 => string[]) public hashToMood;\\r\\n    mapping(bytes32 => uint256[]) public hashToIds;\\r\\n    mapping(uint256 => bytes32) public idToHash;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Adds a new mood to the bank.\\r\\n    /// @dev Decodes mood data from bytes and stores it.\\r\\n    /// @param _moodData Bytes data containing encoded mood information (emojis, theme, colors, etc.).\\r\\n    /// @return newMoodId The ID of the newly added mood.\\r\\n    /// @return creator The address of the creator who added the mood.\\r\\n    function addMood(bytes calldata _moodData, bool _tokenize) external payable returns (uint256, address, bool) {\\r\\n        require(authorized[msg.sender], \\\"Caller not authorized\\\");\\r\\n\\r\\n        Mood memory mood = decodeMood(_moodData);\\r\\n\\r\\n        require(mood.creator != address(0), \\\"Zero address\\\");\\r\\n        require(mood.emojis.length > 0, \\\"No emojis\\\");\\r\\n\\r\\n        uint256 newMoodId = totalMood;\\r\\n\\r\\n        userMoods[mood.creator].push(mood);\\r\\n        creators[newMoodId] = mood.creator;\\r\\n\\r\\n        // It's unclear what the purpose of moodIds is, as the mood ID can be derived from the\\r\\n        // index in the userMoods array. If you need to keep it, make sure the logic is correct.\\r\\n        moodIds[mood.creator].push(newMoodId);\\r\\n\\r\\n        bytes32 moodHash = hash(mood.emojis); // Use the correct function name (hash instead of _hash)\\r\\n        moodUsers[moodHash].push(mood.creator);\\r\\n        idToHash[newMoodId] = moodHash;\\r\\n        hashToIds[moodHash].push(newMoodId);\\r\\n\\r\\n        bool alreadyTokenized;\\r\\n        alreadyTokenized = tokenized[moodHash];\\r\\n\\r\\n        if (_tokenize) {\\r\\n            tokenize(moodHash, true);\\r\\n            tokenizedBy[moodHash] = newMoodId;\\r\\n        }\\r\\n\\r\\n        totalMood++;\\r\\n        return (newMoodId, mood.creator, alreadyTokenized);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes mood data from bytes.\\r\\n    /// @param _moodData Bytes data containing encoded mood information.\\r\\n    /// @return A Mood struct containing the decoded mood data.\\r\\n    function decodeMood(bytes calldata _moodData) public pure returns (Mood memory) {\\r\\n        (\\r\\n            uint256 chainId,\\r\\n            uint256 timestamp,\\r\\n            string[] memory emojis,\\r\\n            address themeAddress,\\r\\n            string memory bgColor,\\r\\n            string memory fontColor,\\r\\n            uint8 expansionLevel,\\r\\n            address creator\\r\\n        ) = abi.decode(_moodData, (uint256, uint256, string[], address, string, string, uint8, address));\\r\\n\\r\\n        return Mood(chainId, timestamp, emojis, themeAddress, bgColor, fontColor, expansionLevel, creator);\\r\\n    }\\r\\n\\r\\n    /// @notice Encodes mood data into bytes.\\r\\n    /// @param _mood The Mood struct containing the mood data to encode.\\r\\n    /// @return Bytes data containing the encoded mood information.\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encode(\\r\\n                _mood.chainId,\\r\\n                _mood.timestamp,\\r\\n                _mood.emojis,\\r\\n                _mood.themeAddress,\\r\\n                _mood.bgColor,\\r\\n                _mood.fontColor,\\r\\n                _mood.expansionLevel,\\r\\n                _mood.creator\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function authorize(address addr, bool isAuthorized) external onlyOwner {\\r\\n        authorized[addr] = isAuthorized;\\r\\n    }\\r\\n\\r\\n    function tokenize(bytes32 moodHash, bool _tokenized) public {\\r\\n        require(authorized[msg.sender], \\\"Caller not authorized\\\");\\r\\n        tokenized[moodHash] = _tokenized;\\r\\n    }\\r\\n\\r\\n    function isTokenized(bytes32 moodHash) external view returns (bool) {\\r\\n        return tokenized[moodHash];\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the mood data for a given mood ID.\\r\\n    /// @param moodId The ID of the mood.\\r\\n    /// @return The Mood struct corresponding to the given mood ID.\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory) {\\r\\n        // Find the creator who owns this moodId\\r\\n        address creator = creators[moodId];\\r\\n        require(creator != address(0), \\\"Invalid mood ID\\\");\\r\\n\\r\\n        Mood[] storage userMoodsArray = userMoods[creator];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i];\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\"); // Revert if no matching mood is found\\r\\n    }\\r\\n\\r\\n    function getOwner(uint256 moodId) external view returns (address) {\\r\\n        return creators[moodId];\\r\\n    }\\r\\n\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256) {\\r\\n        address creator = creators[moodId];\\r\\n        require(creator != address(0), \\\"Invalid mood ID\\\");\\r\\n        Mood[] storage userMoodsArray = userMoods[creator];\\r\\n        for (uint256 i = 0; i < userMoodsArray.length; i++) {\\r\\n            if (i == moodId) {\\r\\n                return userMoodsArray[i].emojis.length;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Mood not found\\\");\\r\\n    }\\r\\n\\r\\n    function getUserMoodLength(address creator) external view returns (uint256) {\\r\\n        return userMoods[creator].length;\\r\\n    }\\r\\n\\r\\n    function getMoodDataByIndex(address creator, uint256 i) external view returns (Mood memory) {\\r\\n        require(i < userMoods[creator].length, \\\"Index out of bounds\\\"); // Add bounds check\\r\\n        return userMoods[creator][i];\\r\\n    }\\r\\n\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory) {\\r\\n        return hashToMood[moodHash];\\r\\n    }\\r\\n\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256[] memory) {\\r\\n        return hashToIds[moodHash];\\r\\n    }\\r\\n\\r\\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32) {\\r\\n        return idToHash[moodId];\\r\\n    }\\r\\n\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash].length;\\r\\n    }\\r\\n\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address) {\\r\\n        bytes32 moodHash = hash(mood);\\r\\n        return moodUsers[moodHash][index];\\r\\n    }\\r\\n\\r\\n    function hash(string[] memory characters) public pure returns (bytes32) {\\r\\n        string memory chars;\\r\\n        for (uint256 i = 0; i < characters.length; i++) {\\r\\n            chars = string.concat(chars, characters[i]);\\r\\n        }\\r\\n        return keccak256(abi.encodePacked(chars));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x60ad24e78fb358b4af0a5b219a5c9bfc2dcfd85c45d39f35ae66e3dc48f948fa\",\"license\":\"MIT\"},\"contracts/interface/IMoodBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OnChainVision Contracts\\r\\n\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nstruct Mood {\\r\\n    uint256 chainId;\\r\\n    uint256 timestamp;\\r\\n    string[] emojis;\\r\\n    address themeAddress;\\r\\n    string bgColor;\\r\\n    string fontColor;\\r\\n    uint8 expansionLevel;\\r\\n    address creator;\\r\\n}\\r\\n\\r\\ninterface IMoodBank {\\r\\n    function addMood(bytes calldata _moodData, bool _tokenize) external payable returns (uint256, address, bool);\\r\\n    function decodeMood(bytes calldata _moodData) external pure returns (Mood memory);\\r\\n    function tokenize(bytes32 moodHash, bool isTokenized) external;\\r\\n    function isTokenized(bytes32 moodHash) external view returns (bool);\\r\\n    function encodeMood(Mood calldata _mood) external pure returns (bytes memory);\\r\\n    function getMoodById(uint256 moodId) external view returns (Mood memory);\\r\\n    function getOwner(uint256 moodId) external view returns (address);\\r\\n    function getMoodLength(uint256 moodId) external view returns (uint256);\\r\\n    function getUserMoodLength(address user) external view returns (uint256);\\r\\n    function getMoodDataByIndex(address user, uint256 i) external view returns (Mood memory);\\r\\n    function getMoodOfHash(bytes32 moodHash) external view returns (string[] memory);\\r\\n    function getMoodIdOfHash(bytes32 moodHash) external view returns (uint256[] memory);\\r\\n    function getMoodUserCount(string[] memory mood) external view returns (uint256);\\r\\n    function getHashByMoodId(uint256 moodId) external view returns (bytes32);\\r\\n    function getMoodUserByIndex(string[] memory mood, uint256 index) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x89335d3afb0e72fb11062470168022ab6b96ff84cb278602df7e733bd092bd20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6124ce80620000a66000396000f3fe6080604052600436106101d85760003560e01c80638da5cb5b11610102578063c8ee6bc911610095578063d3c95f9411610064578063d3c95f9414610643578063db23de951461067b578063ec2aa9531461069b578063f2fde38b146106bb57600080fd5b8063c8ee6bc914610593578063c9fcf545146105c0578063cd53d08e146105ed578063cea43ab21461062357600080fd5b8063b74252c1116100d1578063b74252c1146104ed578063b91816111461050d578063c41a360a1461053d578063c448a9871461057357600080fd5b80638da5cb5b146104555780638fb5548f146104735780639a590ddd146104a0578063aeb2b001146104c057600080fd5b80633b0e317f1161017a578063715018a611610149578063715018a6146103c357806371ef79dc146103d857806385556e03146103f85780638cfa94861461042557600080fd5b80633b0e317f14610323578063610e4575146103435780636fcc5bcf14610383578063708641c5146103a357600080fd5b80631878fcbb116101b65780631878fcbb146102915780631e3e2d4a146102a757806324ea8bcb146102d45780632d1fb3891461030157600080fd5b806302e33f22146101dd5780630b9545db146102265780630e623e4614610259575b600080fd5b3480156101e957600080fd5b506102136101f836600461198f565b6001600160a01b031660009081526006602052604090205490565b6040519081526020015b60405180910390f35b34801561023257600080fd5b506102466102413660046119b3565b6106db565b60405161021d9796959493929190611a2f565b34801561026557600080fd5b50610279610274366004611a8f565b61085e565b6040516001600160a01b03909116815260200161021d565b34801561029d57600080fd5b5061021360015481565b3480156102b357600080fd5b506102c76102c2366004611ab1565b610896565b60405161021d9190611b24565b3480156102e057600080fd5b506102f46102ef366004611be3565b610be6565b60405161021d9190611c1e565b34801561030d57600080fd5b5061032161031c366004611c46565b610c77565b005b34801561032f57600080fd5b5061021361033e366004611dce565b610caa565b34801561034f57600080fd5b5061037361035e366004611ab1565b60009081526003602052604090205460ff1690565b604051901515815260200161021d565b34801561038f57600080fd5b506102c761039e3660046119b3565b610ccc565b3480156103af57600080fd5b506102136103be3660046119b3565b610fc7565b3480156103cf57600080fd5b50610321610ff8565b3480156103e457600080fd5b506102136103f3366004611a8f565b61100c565b34801561040457600080fd5b50610418610413366004611ab1565b611028565b60405161021d9190611e0a565b34801561043157600080fd5b50610373610440366004611ab1565b60036020526000908152604090205460ff1681565b34801561046157600080fd5b506000546001600160a01b0316610279565b34801561047f57600080fd5b5061021361048e366004611ab1565b600b6020526000908152604090205481565b3480156104ac57600080fd5b506102f46104bb366004611a8f565b611114565b3480156104cc57600080fd5b506102136104db366004611ab1565b60046020526000908152604090205481565b3480156104f957600080fd5b50610213610508366004611ab1565b6111cd565b34801561051957600080fd5b5061037361052836600461198f565b60026020526000908152604090205460ff1681565b34801561054957600080fd5b50610279610558366004611ab1565b6000908152600560205260409020546001600160a01b031690565b34801561057f57600080fd5b5061032161058e366004611e6e565b611285565b34801561059f57600080fd5b506102136105ae366004611ab1565b6000908152600b602052604090205490565b3480156105cc57600080fd5b506105e06105db366004611ab1565b6112fc565b60405161021d9190611e91565b3480156105f957600080fd5b50610279610608366004611ab1565b6005602052600090815260409020546001600160a01b031681565b34801561062f57600080fd5b506102c761063e366004611f1d565b61135e565b610656610651366004611f5e565b6113d4565b604080519384526001600160a01b03909216602084015215159082015260600161021d565b34801561068757600080fd5b50610279610696366004611fb1565b6116d5565b3480156106a757600080fd5b506102136106b6366004611dce565b611722565b3480156106c757600080fd5b506103216106d636600461198f565b6117a8565b600660205281600052604060002081815481106106f757600080fd5b600091825260209091206007909102018054600182015460038301546004840180549396509194506001600160a01b0316929161073390611ff5565b80601f016020809104026020016040519081016040528092919081815260200182805461075f90611ff5565b80156107ac5780601f10610781576101008083540402835291602001916107ac565b820191906000526020600020905b81548152906001019060200180831161078f57829003601f168201915b5050505050908060050180546107c190611ff5565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90611ff5565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050506006909301549192505060ff8116906001600160a01b036101009091041687565b6008602052816000526040600020818154811061087a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b61089e611863565b6000828152600560205260409020546001600160a01b0316806108fa5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600660205260408120905b8154811015610bac57848103610ba4578181815481106109365761093661202f565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610a355783829060005260206000200180546109a890611ff5565b80601f01602080910402602001604051908101604052809291908181526020018280546109d490611ff5565b8015610a215780601f106109f657610100808354040283529160200191610a21565b820191906000526020600020905b815481529060010190602001808311610a0457829003601f168201915b505050505081526020019060010190610989565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610a6490611ff5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9090611ff5565b8015610add5780601f10610ab257610100808354040283529160200191610add565b820191906000526020600020905b815481529060010190602001808311610ac057829003601f168201915b50505050508152602001600582018054610af690611ff5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290611ff5565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b031660409091015295945050505050565b600101610914565b5060405162461bcd60e51b815260206004820152600e60248201526d135bdbd9081b9bdd08199bdd5b9960921b60448201526064016108f1565b606081356020830135610bfc6040850185612045565b610c0c608087016060880161198f565b610c19608088018861208e565b610c2660a08a018a61208e565b610c3660e08c0160c08d016120e5565b610c476101008d0160e08e0161198f565b604051602001610c619b9a99989796959493929190612129565b6040516020818303038152906040529050919050565b610c7f6117e6565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b600080610cb683611722565b6000908152600860205260409020549392505050565b610cd4611863565b6001600160a01b0383166000908152600660205260409020548210610d315760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016108f1565b6001600160a01b0383166000908152600660205260409020805483908110610d5b57610d5b61202f565b906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610e5a578382906000526020600020018054610dcd90611ff5565b80601f0160208091040260200160405190810160405280929190818152602001828054610df990611ff5565b8015610e465780601f10610e1b57610100808354040283529160200191610e46565b820191906000526020600020905b815481529060010190602001808311610e2957829003601f168201915b505050505081526020019060010190610dae565b5050509082525060038201546001600160a01b03166020820152600482018054604090920191610e8990611ff5565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb590611ff5565b8015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b50505050508152602001600582018054610f1b90611ff5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4790611ff5565b8015610f945780601f10610f6957610100808354040283529160200191610f94565b820191906000526020600020905b815481529060010190602001808311610f7757829003601f168201915b50505091835250506006919091015460ff8116602083015261010090046001600160a01b03166040909101529392505050565b60076020528160005260406000208181548110610fe357600080fd5b90600052602060002001600091509150505481565b6110006117e6565b61100a6000611813565b565b600a6020528160005260406000208181548110610fe357600080fd5b606060096000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561110957838290600052602060002001805461107c90611ff5565b80601f01602080910402602001604051908101604052809291908181526020018280546110a890611ff5565b80156110f55780601f106110ca576101008083540402835291602001916110f5565b820191906000526020600020905b8154815290600101906020018083116110d857829003601f168201915b50505050508152602001906001019061105d565b505050509050919050565b6009602052816000526040600020818154811061113057600080fd5b9060005260206000200160009150915050805461114c90611ff5565b80601f016020809104026020016040519081016040528092919081815260200182805461117890611ff5565b80156111c55780601f1061119a576101008083540402835291602001916111c5565b820191906000526020600020905b8154815290600101906020018083116111a857829003601f168201915b505050505081565b6000818152600560205260408120546001600160a01b0316806112245760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081b5bdbd9081251608a1b60448201526064016108f1565b6001600160a01b0381166000908152600660205260408120905b8154811015610bac5784810361127d578181815481106112605761126061202f565b600091825260209091206002600790920201015495945050505050565b60010161123e565b3360009081526002602052604090205460ff166112dc5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b60448201526064016108f1565b600091825260036020526040909120805460ff1916911515919091179055565b6000818152600a602090815260409182902080548351818402810184019094528084526060939283018282801561135257602002820191906000526020600020905b81548152602001906001019080831161133e575b50505050509050919050565b611366611863565b60008080808080808061137b8a8c018c612249565b60408051610100810182529889526020890197909752958701949094526001600160a01b039283166060870152608086019190915260a085015260ff90911660c08401521660e08201529b9a5050505050505050505050565b336000908152600260205260408120548190819060ff1661142f5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881b9bdd08185d5d1a1bdc9a5e9959605a1b60448201526064016108f1565b600061143b878761135e565b60e08101519091506001600160a01b03166114875760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016108f1565b6000816040015151116114c85760405162461bcd60e51b81526020600482015260096024820152684e6f20656d6f6a697360b81b60448201526064016108f1565b6001805460e08301516001600160a01b031660009081526006602090815260408083208054808701825590845292829020865160079094020192835581860151948301949094559284015180519293859361152992600285019201906118bd565b5060608201516003820180546001600160a01b0319166001600160a01b03909216919091179055608082015160048201906115649082612367565b5060a082015160058201906115799082612367565b5060c0820151600691909101805460e09384015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790559083018051600084815260056020908152604080832080546001600160a01b031916948716949094179093559251909316835260078252808320805460018101825590845291832090910183905583015161160b90611722565b600081815260086020908152604080832060e08801518154600180820184559286528486200180546001600160a01b0319166001600160a01b03909216919091179055868452600b8352818420859055848452600a835281842080549182018155845282842001869055838352600390915290205490915060ff1687156116a957611697826001611285565b60008281526004602052604090208390555b600180549060006116b983612426565b909155505060e093909301519199919850919650945050505050565b6000806116e184611722565b6000818152600860205260409020805491925090849081106117055761170561202f565b6000918252602090912001546001600160a01b0316949350505050565b6000606060005b835181101561177857818482815181106117455761174561202f565b602002602001015160405160200161175e92919061244d565b60408051601f198184030181529190529150600101611729565b508060405160200161178a919061247c565b60405160208183030381529060405280519060200120915050919050565b6117b06117e6565b6001600160a01b0381166117da57604051631e4fbdf760e01b8152600060048201526024016108f1565b6117e381611813565b50565b6000546001600160a01b0316331461100a5760405163118cdaa760e01b81523360048201526024016108f1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016060815260200160608152602001600060ff16815260200160006001600160a01b031681525090565b828054828255906000526020600020908101928215611903579160200282015b8281111561190357825182906118f39082612367565b50916020019190600101906118dd565b5061190f929150611913565b5090565b8082111561190f5760006119278282611930565b50600101611913565b50805461193c90611ff5565b6000825580601f1061194c575050565b601f0160209004906000526020600020908101906117e391905b8082111561190f5760008155600101611966565b6001600160a01b03811681146117e357600080fd5b6000602082840312156119a157600080fd5b81356119ac8161197a565b9392505050565b600080604083850312156119c657600080fd5b82356119d18161197a565b946020939093013593505050565b60005b838110156119fa5781810151838201526020016119e2565b50506000910152565b60008151808452611a1b8160208601602086016119df565b601f01601f19169290920160200192915050565b878152866020820152600060018060a01b03808816604084015260e06060840152611a5d60e0840188611a03565b8381036080850152611a6f8188611a03565b60ff9690961660a0850152509290921660c0909101525095945050505050565b60008060408385031215611aa257600080fd5b50508035926020909101359150565b600060208284031215611ac357600080fd5b5035919050565b60008282518085526020808601955060208260051b8401016020860160005b84811015611b1757601f19868403018952611b05838351611a03565b98840198925090830190600101611ae9565b5090979650505050505050565b60208152815160208201526020820151604082015260006040830151610100806060850152611b57610120850183611aca565b91506060850151611b7360808601826001600160a01b03169052565b506080850151601f19808685030160a0870152611b908483611a03565b935060a08701519150808685030160c087015250611bae8382611a03565b92505060c0850151611bc560e086018260ff169052565b5060e08501516001600160a01b038116858301525090949350505050565b600060208284031215611bf557600080fd5b81356001600160401b03811115611c0b57600080fd5b820161010081850312156119ac57600080fd5b6020815260006119ac6020830184611a03565b80358015158114611c4157600080fd5b919050565b60008060408385031215611c5957600080fd5b8235611c648161197a565b9150611c7260208401611c31565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611cb957611cb9611c7b565b604052919050565b600082601f830112611cd257600080fd5b81356001600160401b03811115611ceb57611ceb611c7b565b611cfe601f8201601f1916602001611c91565b818152846020838601011115611d1357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611d4157600080fd5b813560206001600160401b0380831115611d5d57611d5d611c7b565b8260051b611d6c838201611c91565b9384528581018301938381019088861115611d8657600080fd5b84880192505b85831015611dc257823584811115611da45760008081fd5b611db28a87838c0101611cc1565b8352509184019190840190611d8c565b98975050505050505050565b600060208284031215611de057600080fd5b81356001600160401b03811115611df657600080fd5b611e0284828501611d30565b949350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611e6157603f19888603018452611e4f858351611a03565b94509285019290850190600101611e33565b5092979650505050505050565b60008060408385031215611e8157600080fd5b82359150611c7260208401611c31565b6020808252825182820181905260009190848201906040850190845b81811015611ec957835183529284019291840191600101611ead565b50909695505050505050565b60008083601f840112611ee757600080fd5b5081356001600160401b03811115611efe57600080fd5b602083019150836020828501011115611f1657600080fd5b9250929050565b60008060208385031215611f3057600080fd5b82356001600160401b03811115611f4657600080fd5b611f5285828601611ed5565b90969095509350505050565b600080600060408486031215611f7357600080fd5b83356001600160401b03811115611f8957600080fd5b611f9586828701611ed5565b9094509250611fa8905060208501611c31565b90509250925092565b60008060408385031215611fc457600080fd5b82356001600160401b03811115611fda57600080fd5b611fe685828601611d30565b95602094909401359450505050565b600181811c9082168061200957607f821691505b60208210810361202957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261205c57600080fd5b8301803591506001600160401b0382111561207657600080fd5b6020019150600581901b3603821315611f1657600080fd5b6000808335601e198436030181126120a557600080fd5b8301803591506001600160401b038211156120bf57600080fd5b602001915036819003821315611f1657600080fd5b803560ff81168114611c4157600080fd5b6000602082840312156120f757600080fd5b6119ac826120d4565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061010082018d83528c60208401526101006040840152808b8252610120840190506101208c60051b85010191508c60005b8d8110156121d35785840361011f19018352368f9003601e190182351261218257600080fd5b8e82350180356020820191506001600160401b038111156121a257600080fd5b8036038213156121b157600080fd5b6121bc868284612100565b95505050602092830192919091019060010161215c565b5050506001600160a01b038a16606084015282810360808401526121f881898b612100565b905082810360a084015261220d818789612100565b91505061221f60c083018560ff169052565b6001600160a01b03831660e08301529c9b505050505050505050505050565b8035611c418161197a565b600080600080600080600080610100898b03121561226657600080fd5b883597506020890135965060408901356001600160401b038082111561228b57600080fd5b6122978c838d01611d30565b97506122a560608c0161223e565b965060808b01359150808211156122bb57600080fd5b6122c78c838d01611cc1565b955060a08b01359150808211156122dd57600080fd5b506122ea8b828c01611cc1565b9350506122f960c08a016120d4565b915061230760e08a0161223e565b90509295985092959890939650565b601f821115612362576000816000526020600020601f850160051c8101602086101561233f5750805b601f850160051c820191505b8181101561235e5782815560010161234b565b5050505b505050565b81516001600160401b0381111561238057612380611c7b565b6123948161238e8454611ff5565b84612316565b602080601f8311600181146123c957600084156123b15750858301515b600019600386901b1c1916600185901b17855561235e565b600085815260208120601f198616915b828110156123f8578886015182559484019460019091019084016123d9565b50858210156124165787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161244657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835161245f8184602088016119df565b8351908301906124738183602088016119df565b01949350505050565b6000825161248e8184602087016119df565b919091019291505056fea2646970667358221220464bd9bd900fc387bc5dd01089b98115f73c1caa6265b5617a900fd2e93eac9d64736f6c63430008160033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMood(bytes,bool)": {
        "details": "Decodes mood data from bytes and stores it.",
        "params": {
          "_moodData": "Bytes data containing encoded mood information (emojis, theme, colors, etc.)."
        },
        "returns": {
          "_0": "newMoodId The ID of the newly added mood.",
          "_1": "creator The address of the creator who added the mood."
        }
      },
      "decodeMood(bytes)": {
        "params": {
          "_moodData": "Bytes data containing encoded mood information."
        },
        "returns": {
          "_0": "A Mood struct containing the decoded mood data."
        }
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "params": {
          "_mood": "The Mood struct containing the mood data to encode."
        },
        "returns": {
          "_0": "Bytes data containing the encoded mood information."
        }
      },
      "getMoodById(uint256)": {
        "params": {
          "moodId": "The ID of the mood."
        },
        "returns": {
          "_0": "The Mood struct corresponding to the given mood ID."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMood(bytes,bool)": {
        "notice": "Adds a new mood to the bank."
      },
      "decodeMood(bytes)": {
        "notice": "Decodes mood data from bytes."
      },
      "encodeMood((uint256,uint256,string[],address,string,string,uint8,address))": {
        "notice": "Encodes mood data into bytes."
      },
      "getMoodById(uint256)": {
        "notice": "Gets the mood data for a given mood ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3534,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10510,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "totalMood",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10514,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "authorized",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10518,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "tokenized",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 10522,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "tokenizedBy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10526,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "creators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10532,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "userMoods",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Mood)11643_storage)dyn_storage)"
      },
      {
        "astId": 10537,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10542,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "moodUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10547,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToMood",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 10552,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "hashToIds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10556,
        "contract": "contracts/core/MoodBank.sol:MoodBank",
        "label": "idToHash",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mood)11643_storage)dyn_storage": {
        "base": "t_struct(Mood)11643_storage",
        "encoding": "dynamic_array",
        "label": "struct Mood[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Mood)11643_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Mood[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Mood)11643_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mood)11643_storage": {
        "encoding": "inplace",
        "label": "struct Mood",
        "members": [
          {
            "astId": 11627,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11629,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11632,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "emojis",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 11634,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "themeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11636,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "bgColor",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 11638,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "fontColor",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 11640,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "expansionLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 11642,
            "contract": "contracts/core/MoodBank.sol:MoodBank",
            "label": "creator",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}